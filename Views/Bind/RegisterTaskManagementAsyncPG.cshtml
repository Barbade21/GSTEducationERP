@model GSTEducationERPLibrary.Bind.Bind

@{
    ViewBag.Title = "RegisterTaskManagementAsyncPG";
    // Layout = "~/Views/Shared/_LayoutERP.cshtml";
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <html>
    <body>
        <div class="card-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row">
                <div class="form-group">
                    <label for="TaskName" class="control-label">Task Name </label>
                    <div class="col-md-10" style="width:370px">
                        @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control", required = "required", maxlength = 50 } })
                        @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                        <span id="taskNameError" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label for="AssignToStaffCode" class="control-label">Assign To </label>
                    <div class="col-md-10" style="width:370px">
                        @{
                            var combinedReportingList = ViewBag.combinedReportingList as List<SelectListItem>;
                        }
                        @Html.DropDownListFor(model => model.AssignToStaffCode, new SelectList(combinedReportingList, "Value", "Text"), "--Select--", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.AssignToStaffCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <label for="TaskStartDate" class="control-label col-md-4">Start Date</label>
                        <div class="col-md-8">
                            <div class="input-group date" id="datepicker" data-target-input="nearest">
                                <input type="date" id="TaskStartDate" name="TaskStartDate" class="form-control" required />
                            </div>
                            <span class="text-danger" id="startDateValidationMsg"></span>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group row">
                        <label for="TaskStartTime" class="control-label col-md-4">Start Time </label>
                        <div class="col-md-8">
                            <div class="input-group date" id="startTimepicker" data-target-input="nearest">
                                <input type="text" name="TaskStartTime" class="form-control datetimepicker-input" data-target="#startTimepicker" required />
                                <div class="input-group-append" data-target="#startTimepicker" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="far fa-clock"></i></div>
                                </div>
                            </div>
                            <span class="text-danger" data-valmsg-for="TaskStartTime"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group row">
                        <label for="TaskEndDate" class="control-label col-md-4">End Date</label>
                        <div class="col-md-8">
                            <div class="input-group date" id="endDatepicker" data-target-input="nearest">
                                <input type="date" id="TaskEndDate" name="TaskEndDate" class="form-control" required />
                            </div>
                            <span class="text-danger" id="endDateValidationMsg"></span>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group row">
                        <label for="TaskEndTime" class="control-label col-md-4">End Time </label>
                        <div class="col-md-8">
                            <div class="input-group date" id="endTimepicker" data-target-input="nearest">
                                <input type="text" name="TaskEndTime" class="form-control datetimepicker-input" data-target="#endTimepicker" required />
                                <div class="input-group-append" data-target="#endTimepicker" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="far fa-clock"></i></div>
                                </div>
                            </div>
                            <span class="text-danger" id="endTimeValidationMsg"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="TaskDescription" class="control-label">Descriptions </label>
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.TaskDescription, new { @class = "form-control", rows = 3, required = "required" })
                    @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="Priority" class="control-label">Priority </label>
                <div class="col-md-10" style="width:370px">
                    @Html.DropDownListFor(model => model.Priority, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "High", Value = "High" },
                        new SelectListItem { Text = "Low", Value = "Low" }
                    }, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="text-align: center;">
                <input type="submit" value="SUBMIT" class="btn btn-success btn-sm" onclick="showConfirmation(event)" />
                <span class="spacer"></span>
                <input type="reset" value="CLEAR" class="btn btn-danger btn-sm" id="btnClear" onclick="clearForm()" />
            </div>

        </div>
        <!-- Bootstrap 4 -->
        <script src="~/Content/plugins/jquery/jquery.min.js"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>

        <script src="~/Content/plugins/moment/moment.min.js"></script>
        <!-- Tempusdominus Bootstrap 4 -->
        <script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>

        <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
        <script src="~/Content/plugins/sweetalert2/sweetalert2.all.min.js"></script>
        <!--script for the date and time validations here-->

        <script>
            $(document).ready(function () {
                $('#startTimepicker').datetimepicker({
                    format: 'LT'
                });

                $('#endTimepicker').datetimepicker({
                    format: 'LT'
                });
            });
        </script>
        <script>
            $(document).ready(function () {
                function validateInputs() {
                    let isValid = true;

                    const startDate = $("#TaskStartDate").val();
                    const endDate = $("#TaskEndDate").val();
                    const startTime = $("#TaskStartTime").val();
                    const endTime = $("#TaskEndTime").val();

                    // Clear previous error messages
                    $("#startDateValidationMsg").text('');
                    $("#endDateValidationMsg").text('');
                    $("#startTimeValidationMsg").text('');
                    $("#endTimeValidationMsg").text('');

                    // Disable end dates before the start date
                    if (startDate) {
                        $("#TaskEndDate").attr("min", startDate);
                    }

                    // Validate dates
                    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
                        $("#endDateValidationMsg").text('End date must be later than or equal to start date.');
                        isValid = false;
                    }

                    // Validate times if dates are the same
                    if (startDate === endDate && startTime && endTime) {
                        const startDateTime = new Date(`${startDate}T${startTime}`);
                        const endDateTime = new Date(`${endDate}T${endTime}`);
                        const diffMinutes = (endDateTime - startDateTime) / (1000 * 60); // Difference in minutes

                        if (diffMinutes < 10) {
                            $("#endTimeValidationMsg").text('End time must be at least 10 minutes after the start time.');
                            isValid = false;

                            // Auto-adjust end time and date
                            const adjustedEndTime = new Date(startDateTime.getTime() + 10 * 60 * 1000); // Add 10 minutes
                            const newEndDate = adjustedEndTime.toISOString().split('T')[0];
                            const newEndTime = adjustedEndTime.toTimeString().slice(0, 5);

                            $("#TaskEndDate").val(newEndDate);
                            $("#TaskEndTime").val(newEndTime);
                        }
                    }

                    return isValid;
                }

               

                // Attach validation to input fields
                $("#TaskStartDate, #TaskEndDate, #TaskStartTime, #TaskEndTime").on('change blur', function () {
                    validateInputs();
                });

                // Format time fields on blur
                $("#TaskStartTime").on('blur', function () {
                    formatTimeTo12Hour($(this));
                });

                $("#TaskEndTime").on('blur', function () {
                    formatTimeTo12Hour($(this));
                });
            });
        </script>

        <script>
            $(document).ready(function () {
                $('#AssignByStaffCode').change(function () {
                    var assignByStaffCode = $(this).val();
                    $.ajax({
                        url: "/Bind/AssignTaskReportingStaffName",
                        type: 'GET',
                        data: { AssignByStaffCode: assignByStaffCode },
                        success: function (data) {
                            $('#AssignToStaffCode').empty(); // Clear existing options
                            $.each(data, function (key, value) {
                                $('#AssignToStaffCode').append($('<option>', {
                                    value: value.Value,
                                    text: value.Text
                                }));
                            });
                        }
                    });
                });
            });
        </script>
        <script>
            function clearForm() {
                $('#TaskName').val('');
                $('#AssignByStaffCode').val('');
                $('#AssignToStaffCode').val('');
                $('#TaskStartDate').val('');
                $('#TaskStartTime').val('');
                $('#TaskEndDate').val('');
                $('#TaskEndTime').val('');
                $('#TaskDescription').val('');
                $('#Priority').val('');
                return false;
            }
        </script>
        <script>
    $('form').submit(function (event) {
        event.preventDefault();
        if (validateForm()) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to submit the form.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, submit it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: $(this).attr('action'),
                        type: $(this).attr('method'),
                        data: $(this).serialize(),
                        success: function (response) {
                            if (response.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Data saved successfully!',
                                    icon: 'success',
                                    showConfirmButton: false,
                                    timer: 1500
                                }).then(() => {
                                    // Redirect to another page
                                    window.location.href = '@Url.Action("ListTaskManagementAsyncPG", "Bind")';
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred: ' + response.errorMessage,
                                    icon: 'error'
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred: ' + xhr.responseText,
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        }
    });

    function validateForm() {
        var isValid = true;
        var taskName = $('#TaskName').val();
        var maxLength = 50; // Maximum length allowed for TaskName

        if (taskName.length > maxLength) {
            $('#taskNameError').text('Task Name must be at most ' + maxLength + ' characters long.');
            isValid = false;
        } else {
            $('#taskNameError').text('');
        }

        // Check if any required fields are empty
        $('.form-control[required]').each(function () {
            if ($.trim($(this).val()) == '') {
                isValid = false;
                $(this).addClass('is-invalid');
            }
        });

        return isValid;
    }
        </script>


    </body>
</html>
}