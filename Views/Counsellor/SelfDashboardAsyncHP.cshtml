@model GSTEducationERPLibrary.Counsellor.Counsellor
<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Enquiry vs Admitted Students</title>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link href="~/Content/plugins/bootstrap-switch/css/bootstrap3/bootstrap-switch.min.css" rel="stylesheet" />
    <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
    <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js" type="text/javascript"></script>
    <script src="~/Content/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
    <link rel="stylesheet" href="~/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
    <title>Enquiry vs Admitted Students</title>
    <script src="https://code.highcharts.com/highcharts.js"></script>


    <style>
        .small-box {
            transition: box-shadow 0.3s ease-in-out, transform 0.3s ease-in-out, background-color 0.3s ease-in-out;
        }

            .small-box:hover {
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
                transform: scale(1.05);
                background-color: white;
                color: white;
            }

                .small-box:hover .inner p,
                .small-box:hover .inner span {
                    color: white;
                }


        .small-box {
            position: relative;
            display: block;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .inner {
            padding: 10px;
        }

        .bg-success {
            background-color: #28a745 !important;
            color: white;
        }

        .counter {
            display: flex;
            align-items: center;
            align-content: center !important;
            justify-content: center !important;
            margin: 1.5%;
            font-size: 30px;
            background-color: #f4f4f4;
            color: #499f68;
            width: 50px;
            border-radius: 50%;
            font-weight: bold;
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div>
        <div class="" row ml-5 mr-3">
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="form-group">


                            <div class="card-body">
                                <section class="content">
                                    <div class="container-fluid">
                                        <div class="row">




                                            <div class="col-lg-3 col-6">
                                                <!-- small box -->
                                                <div class="small-box bg-gradient-teal">
                                                    <div class="inner">
                                                        <div class="row">
                                                            <!-- First Row with One Column -->
                                                            <div class="col-12">
                                                                <a class="MonthlyEnquiries" href="#" data-url="@Url.Action("MonthlyEnquiryListAsyncHP","Counsellor")" id="MonthlyEnquiries" data-toggle="modal" data-text="Monthly Enquiry List" data-target="#EditLeaveModal" title="List">
                                                                    <p style="color:white;"><i class='nav-icon fa fa-user' style='font-size:24px'></i> Monthly Enquiry :  <div class="counter" id="monthlylead" data-countto="@Html.ViewBag.monthlyCount" data-duration="2000">0</div></p>
                                                                    @*<a class="MonthlyEnquiries" href="#" data-url="@Url.Action("MonthlyEnquiryListAsyncHP","Counsellor")" id="MonthlyEnquiries" data-toggle="modal" data-target="#EditLeaveModal" title="EDIT"></a>*@


                                                                    <!-- First Row with One Column -->
                                                                </a>
                                                                <div class="row mt-3">
                                                                    <!-- Second Row with Two Columns -->
                                                                    <div class="col-6">
                                                                        <span class="count" id="CourseEnquiryCount">Course :<span style="font-weight: bold; font-size: 24px;">  @ViewBag.CourseEnquiryCount</span>
                                                                    </div>
                                                                    <div class="col-6">
                                                                        <span class="count" id="PlacementEnquiryCount">Placement :<span style="font-weight: bold; font-size: 24px;">   @ViewBag.PlacementEnquiryCount</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>


                                            <div class="col-lg-3 col-6">
                                                <div class="small-box bg-gradient-maroon">
                                                    <div class="inner">
                                                        <div class="row">
                                                            <div class="col-12">
                                                                <a class="MonthlyAddmissions" href="#" data-url="@Url.Action("MonthlyAddmissionListAsyncHP","Counsellor")" id="MonthlyAddmissions" data-toggle="modal" data-text="Monthly Addmission  List" data-target="#EditLeaveModal" title="List">
                                                                    <p style="color:white;"><i class='nav-icon fa fa-user' style='font-size:24px'></i> Monthly Admissions   :  <div class="counter" id="monthlylead" data-countto="@Html.ViewBag.AddmissionCount" data-duration="2000">0</div> </p>
                                                                </a>
                                                                <div class="row mt-3">

                                                                    <div class="col-6 ">
                                                                        <span class="count" id="CourseAddmisionCount">Course :<span style="font-weight: bold; font-size: 24px;"> @ViewBag.CourseAddmisionCount</span>
                                                                    </div>
                                                                    <div class="col-6">
                                                                        <span class="count" id="PlacementAddmisionCount">Placement :<span style="font-weight: bold; font-size: 24px;"> @ViewBag.PlacementAddmisionCount</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>




                                            <div class="col-lg-3 col-6">
                                                <div class="small-box bg-info" style="height:159px;">
                                                    <div class="inner">
                                                        <p> <i class='fas fa-calendar-alt' style='font-size:24px'></i> Monthly Lost Enquiry  </p>
                                                        <a class="LostEnquiries" href="#" data-url="@Url.Action("LostCandidListAsyncHP","Counsellor")" id="LostEnquiries" data-toggle="modal" data-text="Lost Enquiry List" data-target="#EditLeaveModal" title="List">
                                                            <span class="counter" id="LostEnquiry"></span><span style="font-weight: bold; font-size: 24px;"></span> <div class="counter" id="LostEnquiry" data-countto="@Html.ViewBag.LostEnquiry" data-duration="2000">0</div>
                                                        </a>

                                                    </div>
                                                </div>

                                            </div>


                                            <div class="col-lg-3 col-6">

                                                <div class="small-box bg-gradient-gray" style="height:159px;">
                                                    <div class="inner">
                                                        <p> <i class='fas fa-calendar-alt' style='font-size:24px'></i>  Monthly Pending/Hold Enq  </p>
                                                        <a class="PendingEnquiry" href="#" data-url="@Url.Action("PendingCandidListAsyncHP","Counsellor")" id="PendingEnquiry" data-toggle="modal" data-text="Pending and Hold  Enquiry List" data-target="#EditLeaveModal" title="List">
                                                            <div class="counter" id="pendingenq" data-countto="@Html.ViewBag.PendingEnquiry" data-duration="2000">0</div>
                                                        </a>

                                                        <div class="row mt-1" style="color:white;">
                                                            <!-- Second Row with Two Columns -->
                                                            <div class="col-6">
                                                                <span class="count" id="Pending">Pending : <span style="font-weight: bold; font-size: 24px;"> @ViewBag.PendingEnquiryy</span>
                                                            </div>
                                                            <div class="col-6">
                                                                <span class="count" id="Hold">Hold : <span style="font-weight: bold; font-size: 24px;"> @ViewBag.HoldEnquiryy</span>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </section>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



    @*PopUpScript*@

    <div class="modal fade" id="EditLeaveModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content" style="left:-5vw;">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel" style="color: #33CCCC;">Candidate List</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color:red;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                </div>
            </div>
        </div>
    </div>




    <div class="row">

        <div class="container">

            <div class="form-group form-inline">
                <div class="col-md-1" style="padding-right:0px !important">
                    <label>From </label>
                </div>
                <div class="col-md-2">
                    <input type="month" class="form-control" id="LEAstartMonthYear" name="startMonthYear">
                </div>
                <div class="col-md-1" style="padding-right:0px !important">
                    <label> To </label>
                </div>
                <div class="col-md-2">
                    <input type="month" class="form-control" id="LEAendMonthYear" name="endMonthYear">
                </div>


                <div class="form-group form-inline col-md-6">
                    <div class="col-md-2 offset-md-1">
                        <label for="CWAstartMonthYear">From</label>
                    </div>
                    <div class="col-md-3">
                        <input type="month" class="form-control" id="CWAstartMonthYear" name="startMonthYear">
                    </div>

                    <div class="col-md-2 offset-md-1">
                        <label for="CWAendMonthYear">To</label>
                    </div>
                    <div class="col-md-3">
                        <input type="month" class="form-control" id="CWAendMonthYear" name="endMonthYear">
                    </div>
                </div>

                <div class="row">

                    @*<div class="container">*@
                    <div class="col-md-6">

                        <div class="card" style="top:1vw;">
                            <h5 class="text-center">Lead vs Enquiry vs Admission </h5>

                            <div class="card-body">
                                <div id="container1" style="min-width: 310px; height: 400px; max-width:600px; margin: 0 auto">
                                    <canvas id="myChart1" width="643" height="429"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">

                        <div class="card" style="top:1vw;">
                            <h5 class="text-center">Course Wise Admission </h5>

                            <div class="card-body">
                                <div id="container1" style="min-width: 310px; height: 400px; max-width:600px; margin: 0 auto">
                                    <div id="lollypopChartCourseWiseAdmCounts" width="600" height="400"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>
</html>



<link href="~/Content/plugins/toastr/toastr.min.css" rel="stylesheet" />
<script src="~/Content/plugins/toastr/toastr.min.js"></script>
<script type="text/javascript">

    function DynamicAjax(url) {
        if (url) {
            $.ajax({
                url: url,
                type: 'GET',
                /*data: { CandidateCode: candidateCode },*/
                success: function (data) {
                    $('#EditLeaveModal .modal-body').html(data);
                    $('#EditLeaveModal').modal('show');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("AJAX Error:", textStatus, errorThrown);
                }
            });
        } else {
            console.error("URL or candidate code is not defined");
        }
    }

    $('.MonthlyEnquiries').on('click', function () {

        var url = $(this).data('url');
        var text = $(this).data('text');
        $('#exampleModalLabel').text(text);
        console.log("URL:", url);
        DynamicAjax(url);
    });
    $('.MonthlyAddmissions').on('click', function () {
        var url = $(this).data('url');
        var text = $(this).data('text');
        $('#exampleModalLabel').text(text);
        console.log("URL:", url);
        DynamicAjax(url);
    });
    $('.LostEnquiries').on('click', function () {
        var url = $(this).data('url');
        var text = $(this).data('text');
        $('#exampleModalLabel').text(text);
        console.log("URL:", url);
        DynamicAjax(url);
    });
    $('.PendingEnquiry').on('click', function () {
        var url = $(this).data('url');
        var text = $(this).data('text');
        $('#exampleModalLabel').text(text);
        console.log("URL:", url);
        DynamicAjax(url);
    });

</script>


<script>
    $(document).ready(function () {
        let myChart1; // Declare a global variable to store the chart instance

        // Function to format date as yyyy-MM-dd
        function formatDate(dateStr) {
            const [year, month] = dateStr.split("-");
            return `${year}-${month}-01`; // Assuming you're working with the first day of the selected month
        }

        // Set the initial date picker values to one year ago and today
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');

        const pastDate = new Date();
        pastDate.setFullYear(currentYear - 1);
        const pastYear = pastDate.getFullYear();
        const pastMonth = (pastDate.getMonth() + 1).toString().padStart(2, '0');

        $('#LEAstartMonthYear').val(`${pastYear}-${pastMonth}`);
        $('#LEAendMonthYear').val(`${currentYear}-${currentMonth}`);

        // Set max attribute to today's date to prevent future dates
        const maxDate = `${currentYear}-${currentMonth}`;
        $('#LEAstartMonthYear').attr('max', maxDate);
        $('#LEAendMonthYear').attr('max', maxDate);

        // Function to validate the date inputs
        function validateDates(startDate, endDate) {
            const start = new Date(formatDate(startDate));
            const end = new Date(formatDate(endDate));
            const today = new Date(formatDate(maxDate));

            if (start > today) {
                $('#LEAstartMonthYear').val(maxDate); // Reset start date to current month if invalid
                startDate = maxDate;
            }

            if (end > today) {
                $('#LEAendMonthYear').val(maxDate); // Reset end date to current month if invalid
                endDate = maxDate;
            }

            if (start > end) {
                $('#LEAendMonthYear').val(startDate); // Reset end date to start date if end date is before start date
                endDate = startDate;
            }

            // Update min and max attributes for date pickers
            $('#LEAendMonthYear').attr('min', startDate);
            $('#LEAstartMonthYear').attr('max', endDate);

            return { startDate, endDate };
        }

        // Function to load the graph
        function loadGraph(startDate, endDate) {
            $.ajax({
                url: '@Url.Action("GraphEnqvsAdmissionself", "Counsellor")',
                data: {
                    startDate: formatDate(startDate),
                    endDate: formatDate(endDate)
                },
                type: 'GET',
                success: function (response) {
                    const graphData = response.DataFetchedEnqvsAdmissionStaff ? JSON.parse(response.DataFetchedEnqvsAdmissionStaff) : [];
                    renderChart(graphData);
                },
                error: function (xhr, status, error) {
                    console.error("An error occurred while fetching graph data:", error);
                    toastr.error('An error occurred while fetching data: ' + xhr.responseText);
                }
            });
        }

        // Function to render the chart
        function renderChart(dataPoint) {
            const ctx = document.getElementById('myChart1').getContext('2d');

            // Destroy previous chart instance if it exists
            if (myChart1) {
                myChart1.destroy();
            }

            const labels = dataPoint.map(data => data.Label);
            const leadData = dataPoint.map(data => data.Lead);
            const enquiryData = dataPoint.map(data => data.enquiry);
            const admissionData = dataPoint.map(data => data.Admission);

            myChart1 = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Lead Count',
                            data: leadData,
                            backgroundColor: 'rgba(255, 99, 132, 0.5)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Enquiry Count',
                            data: enquiryData,
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Admission Count',
                            data: admissionData,
                            backgroundColor: 'rgba(255, 87, 34, 0.5)',  // Dark orange
                            borderColor: 'rgba(255, 87, 34, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            stacked: false,
                            title: {
                                display: true,
                                text: 'Month' // X-axis title
                            }
                        },
                        y: {
                            stacked: false,
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Candidate Count' // Y-axis title
                            }
                        }
                    }
                }
            });
        }


        // Initial load with default dates
        loadGraph($('#LEAstartMonthYear').val(), $('#LEAendMonthYear').val());

        // Trigger graph reload on date range change
        $('#LEAstartMonthYear, #LEAendMonthYear').on('change', function () {
            const startDate = $('#LEAstartMonthYear').val();
            const endDate = $('#LEAendMonthYear').val();
            if (startDate && endDate) {
                const validatedDates = validateDates(startDate, endDate);
                loadGraph(validatedDates.startDate, validatedDates.endDate);
            }
        });
    });
</script>


@*StaffWise Lollypop Graph*@

@*<script type="text/javascript">
$(document).ready(function () {
    // Set default date range (one year ago to today)
    //var today = new Date();
    //var lastYear = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());
    //var formattedLastYear = lastYear.toISOString().split('T')[0];
    //var formattedToday = today.toISOString().split('T')[0];

    //// Initialize date pickers with default dates
    //$('#CWAstartDate').val(formattedLastYear);
    //$('#CWAendDate').val(formattedToday);

    var today = new Date();
    var lastYear = new Date(today.getFullYear() - 1, today.getMonth(), 1);
    var formattedLastYear = lastYear.toISOString().split('T')[0].substring(0, 7); // Format to YYYY-MM
    var formattedToday = today.toISOString().split('T')[0].substring(0, 7); // Format to YYYY-MM

    // Initialize date pickers with default dates
    $('#CWAstartMonthYear').val(formattedLastYear);
    $('#CWAendMonthYear').val(formattedToday);

    // Function to initialize the Lollypop Chart
    function initializeLollypopChartstaff(LollypopChartData) {
        //var margin = { top: 22, right: 20, bottom: 85, left: 15 },
        //    width = 540 - margin.left - margin.right,
        //    height = 400 - margin.top - margin.bottom;
        var margin = { top: 20, right: 20, bottom: 85, left: 50 },
            width = 600 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // Clear the existing chart
        d3.select("#lollypopChartCourseWiseAdmCounts").select("svg").remove();

        // Append the SVG container
        var svg = d3.select("#lollypopChartCourseWiseAdmCounts")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var xScale = d3.scaleBand().range([0, width]).padding(0.1);
        var yScale = d3.scaleLinear().range([height, 0]);

        xScale.domain(LollypopChartData.map(function (d) { return d.Label; }));
        yScale.domain([0, d3.max(LollypopChartData, function (d) { return d.AdmCount; })]);

        svg.selectAll(".line")
            .data(LollypopChartData)
            .enter()
            .append("line")
            .attr("class", "line")
            .attr("x1", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
            .attr("x2", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
            .attr("y1", height)
            .attr("y2", function (d) { return yScale(d.AdmCount); })
            .attr("stroke", "black")
            .attr("stroke-width", 1);

        svg.selectAll(".dot")
            .data(LollypopChartData)
            .enter()
            .append("circle")
            .attr("class", "dot")
            .attr("cx", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
            .attr("cy", function (d) { return yScale(d.AdmCount); })
            .attr("r", 20)
            .attr("fill", "#5080EF")
            .attr("stroke", "#36a2eb")
            .attr("stroke-width", 2);

        svg.selectAll(".text")
            .data(LollypopChartData)
            .enter()
            .append("text")
            .attr("class", "text")
            .attr("x", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
            .attr("y", function (d) { return yScale(d.AdmCount); })
            .attr("dy", ".35em")
            .attr("fill", "black")
            .attr("text-anchor", "middle")
            .text(function (d) { return d.AdmCount; });

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(xScale))
            .selectAll("text")
            .attr("transform", "rotate(-45)")
            .style("text-anchor", "end");

        svg.append("g")
            .attr("class", "y axis")
            .call(d3.axisLeft(yScale));

        svg.append("text")
            .attr("transform", "translate(" + (width / 2) + " ," + (height + margin.bottom - 10) + ")")
            .style("text-anchor", "middle")
            .style("font-size", "14px")
            .style("font-weight", "bold")
            .text("Course");

        // Add Y Axis label
        svg.append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left + 10)
            .attr("x", 0 - (height / 2))
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .style("font-size", "14px")
            .style("font-weight", "bold")
            .text("Addmission Count");
    }

    // Function to validate dates
    function validateDates(startDate, endDate) {
        var start = new Date(startDate);
        var end = new Date(endDate);
        var today = new Date();

        if (start > end) {
            toastr.error('Start Date cannot be greater than End Date.');
            return false;
        }

        if (start > today) {
            toastr.error('Start Date cannot be in the future.');
            return false;
        }

        return true; // Dates are valid
    }

    // Function to fetch data and update the Lollypop Chart
    function FetchDataAndUpdateLollypopChartstaff(startDate, endDate) {
        if (!validateDates(startDate, endDate)) return;

        $.ajax({
            url: '@Url.Action("StaffCourseWiseAdmissionCount", "Counsellor")',
            type: 'GET',
            data: { startDate: startDate, endDate: endDate },
            success: function(result) {
                if (result.error) {
                    toastr.error(result.error);
                    return;
                }
                var data = JSON.parse(result.FilteredLollyPopChartDatastaff);
                initializeLollypopChartstaff(data);
            },
            error: function(xhr, status, error) {
                toastr.error('Failed to fetch data: ' + error);
            }
        });
    }

    // Initialize the chart with initial data
    var initialData = JSON.parse('@Html.Raw(ViewBag.CourseWiseAdmCounts)');
    initializeLollypopChartstaff(initialData);

    // Update the chart when date inputs change
    $('#CWAstartMonthYear, #CWAendMonthYear').on('change', function () {
        var startDate = $('#CWAstartMonthYear').val();
        var endDate = $('#CWAendMonthYear').val();
        FetchDataAndUpdateLollypopChartstaff(startDate, endDate);
    });
    // Update end date options when start date changes
    $('#CWAstartMonthYear').on('change', function () {
        var startDate = $('#CWAstartMonthYear').val();
        $('#CWAendMonthYear').attr('min', startDate);
    });

    // Update start date options when end date changes
    $('#CWAendMonthYear').on('change', function () {
        var endDate = $('#CWAendMonthYear').val();
        $('#CWAstartMonthYear').attr('max', endDate);
    });*@

<script type="text/javascript">
    $(document).ready(function () {
        var today = new Date();
        var lastYear = new Date(today.getFullYear() - 1, today.getMonth(), 1);
        var lastDayOfCurrentMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0); // Last day of the current month

        var formattedLastYear = lastYear.toISOString().split('T')[0].substring(0, 7); // Format to YYYY-MM
        var formattedEndOfCurrentMonth = lastDayOfCurrentMonth.toISOString().split('T')[0].substring(0, 7); // Format to YYYY-MM

        // Initialize date pickers with default dates
        $('#CWAstartMonthYear').val(formattedLastYear);
        $('#CWAendMonthYear').val(formattedEndOfCurrentMonth);

        // Set max attribute to prevent selecting future dates
        $('#CWAstartMonthYear').attr('max', formattedEndOfCurrentMonth);
        $('#CWAendMonthYear').attr('max', formattedEndOfCurrentMonth);

        // Function to initialize the Lollypop Chart
        function initializeLollypopChartstaff(LollypopChartData) {
            var margin = { top: 20, right: 20, bottom: 85, left: 50 },
                width = 600 - margin.left - margin.right,
                height = 400 - margin.top - margin.bottom;

            // Clear the existing chart
            d3.select("#lollypopChartCourseWiseAdmCounts").select("svg").remove();

            // Append the SVG container
            var svg = d3.select("#lollypopChartCourseWiseAdmCounts")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var xScale = d3.scaleBand().range([0, width]).padding(0.1);
            var yScale = d3.scaleLinear().range([height, 0]);

            xScale.domain(LollypopChartData.map(function (d) { return d.Label; }));
            yScale.domain([0, d3.max(LollypopChartData, function (d) { return d.AdmCount; })]);

            svg.selectAll(".line")
                .data(LollypopChartData)
                .enter()
                .append("line")
                .attr("class", "line")
                .attr("x1", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
                .attr("x2", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
                .attr("y1", height)
                .attr("y2", function (d) { return yScale(d.AdmCount); })
                .attr("stroke", "black")
                .attr("stroke-width", 1);

            svg.selectAll(".dot")
                .data(LollypopChartData)
                .enter()
                .append("circle")
                .attr("class", "dot")
                .attr("cx", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
                .attr("cy", function (d) { return yScale(d.AdmCount); })
                .attr("r", 20)
                .attr("fill", "#5080EF")
                .attr("stroke", "#36a2eb")
                .attr("stroke-width", 2);

            svg.selectAll(".text")
                .data(LollypopChartData)
                .enter()
                .append("text")
                .attr("class", "text")
                .attr("x", function (d) { return xScale(d.Label) + xScale.bandwidth() / 2; })
                .attr("y", function (d) { return yScale(d.AdmCount); })
                .attr("dy", ".35em")
                .attr("fill", "black")
                .attr("text-anchor", "middle")
                .text(function (d) { return d.AdmCount; });

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(xScale))
                .selectAll("text")
                .attr("transform", "rotate(-45)")
                .style("text-anchor", "end");

            svg.append("g")
                .attr("class", "y axis")
                .call(d3.axisLeft(yScale));

            svg.append("text")
                .attr("transform", "translate(" + (width / 2) + " ," + (height + margin.bottom - 10) + ")")
                .style("text-anchor", "middle")
                .style("font-size", "14px")
                .style("font-weight", "bold")
                .text("Course");

            // Add Y Axis label
            svg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 0 - margin.left + 10)
                .attr("x", 0 - (height / 2))
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .style("font-size", "14px")
                .style("font-weight", "bold")
                .text("Admission Count");
        }

        // Function to validate dates
        function validateDates(startDate, endDate) {
            var start = new Date(startDate + '-01'); // Convert YYYY-MM to Date object
            var end = new Date(endDate + '-01'); // Convert YYYY-MM to Date object
            var today = new Date();

            if (start > end) {
                toastr.error('Start Date cannot be greater than End Date.');
                return false;
            }

            if (end > today) {
                toastr.error('End Date cannot be in the future.');
                return false;
            }

            return true; // Dates are valid
        }

        // Function to fetch data and update the Lollypop Chart
        function FetchDataAndUpdateLollypopChartstaff(startDate, endDate) {
            if (!validateDates(startDate, endDate)) return;

            $.ajax({
                url: '@Url.Action("StaffCourseWiseAdmissionCount", "Counsellor")',
                type: 'GET',
                data: { startDate: startDate, endDate: endDate },
                success: function(result) {
                    if (result.error) {
                    toastr.error(result.error);
                    return;
                }
                var data = JSON.parse(result.FilteredLollyPopChartDatastaff);
                initializeLollypopChartstaff(data);
            },
            error: function(xhr, status, error) {
                toastr.error('Failed to fetch data: ' + error);
            }
        });
    }

    // Initialize the chart with initial data
    var initialData = JSON.parse('@Html.Raw(ViewBag.CourseWiseAdmCounts)');
    initializeLollypopChartstaff(initialData);

    // Update the chart when date inputs change
    $('#CWAstartMonthYear, #CWAendMonthYear').on('change', function () {
        var startDate = $('#CWAstartMonthYear').val();
        var endDate = $('#CWAendMonthYear').val();
        FetchDataAndUpdateLollypopChartstaff(startDate, endDate);
    });

    // Update end date options when start date changes
    $('#CWAstartMonthYear').on('change', function () {
        var startDate = $('#CWAstartMonthYear').val();
        $('#CWAendMonthYear').attr('min', startDate);
    });

    // Update start date options when end date changes
    $('#CWAendMonthYear').on('change', function () {
        var endDate = $('#CWAendMonthYear').val();
        $('#CWAstartMonthYear').attr('max', endDate);
    });



    // Counter animation (if needed)
    $(".counter").each(function () {
        var $this = $(this),
            countTo = $this.attr("data-countto"),
            countDuration = parseInt($this.attr("data-duration"));

        $({ counter: $this.text() }).animate(
            { counter: countTo },
            {
                duration: countDuration,
                easing: "linear",
                step: function () {
                    $this.text(Math.floor(this.counter));
                },
                complete: function () {
                    $this.text(this.counter);
                }
            }
        );
    });
})
</script>
<script src="~/Content/plugins/datatables/jquery.dataTables.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-responsive/js/dataTables.responsive.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-responsive/js/responsive.bootstrap4.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-buttons/js/dataTables.buttons.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-buttons/js/buttons.bootstrap4.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/jszip/jszip.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/pdfmake/pdfmake.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/pdfmake/vfs_fonts.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-buttons/js/buttons.html5.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-buttons/js/buttons.print.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/datatables-buttons/js/buttons.colVis.min.js" type="text/javascript"></script>

<link href="~/Content/plugins/toastr/toastr.min.css" rel="stylesheet" />
<script src="~/Content/plugins/toastr/toastr.min.js"></script>

<script src="https://d3js.org/d3.v7.min.js"></script>























