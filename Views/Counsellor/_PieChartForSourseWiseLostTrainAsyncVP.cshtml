@model GSTEducationERPLibrary.Counsellor.Counsellor

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://d3js.org/d3.v7.min.js"></script>
<link href="~/Content/plugins/bootstrap-switch/css/bootstrap3/bootstrap-switch.min.css" rel="stylesheet" />
<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
<link rel="stylesheet" href="~/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />


<div class="card" id="Svslost">
    <div class="card-body">
        <h5 class="text-center">Source Wise Lost Count </h5>
        <div id="container2" style="min-width: 310px; height: 400px; max-width: 400px; margin: 0 auto; margin-top: -5vw; bottom: -5vw; ">
            <canvas id="myPieChart" width="400" height="400"></canvas>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        // Initialize default date range (one year ago to today)
        var today = new Date();
        var lastYear = new Date(today.getFullYear() - 1, today.getMonth());
        var formattedLastYear = lastYear.toISOString().slice(0, 7);
        var formattedToday = today.toISOString().slice(0, 7);

        // Set the default date range values for date pickers
        $('#startDate').val(formattedLastYear);
        $('#endDate').val(formattedToday);

        // Set the max attribute to the current month-year
        $('#startDate, #endDate').attr('max', formattedToday);

        let myEnquiryCountforSource;

        // Initialize the pie chart
        function initializePieChart(PieChartData) {
            // Calculate total count
            const totalCount = PieChartData.reduce((sum, item) => sum + item.enquirycount, 0);

            // Extract labels, counts, and colors
            const labels = PieChartData.map(item => item.Label);
            const enquiryCounts = PieChartData.map(item => item.enquirycount);
            const colors = [
                'rgba(75, 192, 195, 0.6)',
                'rgba(250, 99, 132, 0.6)',
                'rgba(54, 162, 235, 0.6)',
                'rgba(260, 206, 86, 0.6)',
                'rgba(153, 102, 240, 0.6)',
                'rgba(245, 159, 64, 0.6)'
            ];

            // Initialize Chart.js
            const ctx = $('#myPieChart')[0].getContext('2d');
            myEnquiryCountforSource = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Lead Count',
                        data: enquiryCounts,
                        backgroundColor: colors,
                        borderColor: colors.map(color => color.replace('0.6', '1')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right', // Position the legend to the right
                            labels: {
                                generateLabels: function (chart) {
                                    const data = chart.data;
                                    const legendItems = data.labels.map((label, index) => {
                                        return {
                                            text: `${label}: ${data.datasets[0].data[index]}`,
                                            fillStyle: data.datasets[0].backgroundColor[index],
                                            hidden: false, // Ensure no cross-out effect
                                            lineWidth: 0, // No line through the legend text
                                            strokeStyle: 'rgba(0,0,0,0)', // No border effect
                                            pointStyle: 'rect',
                                            datasetIndex: 0,
                                        };
                                    });

                                    // Add total count at the end of the legend
                                    legendItems.push({
                                        text: `Total Count: ${totalCount}`,
                                        fillStyle: 'transparent', // No color box for total
                                        hidden: false,
                                        lineWidth: 0,
                                        strokeStyle: 'rgba(0,0,0,0)',
                                        pointStyle: 'none',
                                        datasetIndex: 0,
                                    });

                                    return legendItems;
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `${context.label}: ${context.raw}`;
                                }
                            }
                        }
                    }
                }
            });
        }


        // Update the pie chart with new data
        function updatePieChart(data) {
            if (myEnquiryCountforSource) {
                myEnquiryCountforSource.data.labels = data.map(function (item) { return item.Label; });
                myEnquiryCountforSource.data.datasets[0].data = data.map(function (item) { return item.enquirycount; });
                myEnquiryCountforSource.update();
            }
        }

        // Function to validate and adjust dates
    function validateAndAdjustDates() {
        var startDateInput = $('#startDate');
        var endDateInput = $('#endDate');
    var startDate = startDateInput.val();
    var endDate = endDateInput.val();

    // Convert dates to JavaScript Date objects for comparison
    var start = new Date(startDate + '-01');
    var end = new Date(endDate + '-01');
    var today = new Date();

    // When start date changes, update end date restrictions
    startDateInput.on('change', function () {
        var selectedStart = new Date($(this).val() + '-01');

        // Calculate the next month after the selected start date
        var minEndDate = new Date(selectedStart);
        minEndDate.setMonth(minEndDate.getMonth() + 1);

        // Format the date to YYYY-MM format for the min attribute
        var minEndDateStr = minEndDate.getFullYear() + '-' +
            String(minEndDate.getMonth() + 1).padStart(2, '0');

        // Set minimum date for end date picker
        endDateInput.attr('min', minEndDateStr);

        // If current end date is before or same as start date, reset it
        var currentEndDate = new Date(endDateInput.val() + '-01');
        if (currentEndDate <= selectedStart) {
            endDateInput.val(minEndDateStr);
        }
    });

    // Validation checks
    if (start > end) {
        toastr.error('Start Month-Year cannot be greater than End Month-Year.');
        return false;
    }

    if (start > today) {
        toastr.error('Start Month-Year cannot be in the future.');
        return false;
    }

    // Check if start and end are the same month
    if (start.getFullYear() === end.getFullYear() &&
        start.getMonth() === end.getMonth()) {
        toastr.error('End Month-Year must be after Start Month-Year.');
        return false;
    }

    return true; // Dates are valid
}

        // Fetch data and update the chart based on date range
        function FetchDataAndUpdatePieChart() {
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();

            // Validate dates before fetching data
            if (!validateAndAdjustDates()) {
                return;
            }

            $.ajax({
                url: '@Url.Action("PieChartForSourseWiseLostTrainAsyncVP", "Counsellor")',
                type: 'GET',
                data: { startDate: startDate, endDate: endDate },
                success: function(result) {
                    if (result.error) {
                        toastr.error(result.error);
                        return;
                    }
                    var data = JSON.parse(result.FilteredPieChartData);
                    updatePieChart(data);
                },
                error: function(xhr, status, error) {
                    toastr.error('Failed to fetch data: ' + error);
                }
            });
        }

        // Initialize the chart with default data
        var DataPieChart = JSON.parse('@Html.Raw(ViewBag.SourceWiseCount)');
        initializePieChart(DataPieChart);

        // Handle date change events and update the chart
        $('#startDate, #endDate').on('change', FetchDataAndUpdatePieChart);

        // Initial validation and adjustment
        validateAndAdjustDates();
    });
</script>
