@model GSTEducationERPLibrary.Counsellor.Counsellor

@{
    ViewBag.Title = "UpdateEnquirySks";
    Layout = "~/Views/Shared/_LayoutERP.cshtml";
}
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AdminLTE 3 | DataTables</title>
    <link rel="stylesheet" href="~/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
    <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Bootstrap 4 -->
    @*@
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        @*@
    <script src="~/Content/plugins/moment/moment.min.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->

    <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>
    <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css">
    <script src="~/Content/plugins/toastr/toastr.min.js"></script>
    <!-- Include Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="~/Content/plugins/icheck-bootstrap/icheck-bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/Content/plugins/bs-stepper/css/bs-stepper.min.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/Content/plugins/bs-stepper/js/bs-stepper.min.js"></script>
</head>
<style>
    h2 {
        padding-top: 10px;
        margin-bottom: 10px;
        font-family: Verdana;
        font-weight: bold;
        font-size: large;
        color: #33CCCC;
        margin-left: 15px;
    }
</style>


@*<form method="post">
*@
@using (Html.BeginForm("UpdateEnquirySks", "Counsellor", FormMethod.Post, new { enctype = "multipart/form-data", id = "myform" }))
{

    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-12">
            <div class="card card-default">
                <div class="card-header">
                    <h2>Update Enquiry Form </h2>
                </div>
                <div class="card-body p-0">
                    <div class="bs-stepper">
                        <div class="bs-stepper-header" role="tablist">
                            <!-- your steps here -->
                            <div class="step" data-target="#personal-info">
                                <button type="button" class="step-trigger" role="tab" aria-controls="personal-info" id="personal-info-trigger">
                                    <span class="bs-stepper-circle">1</span>
                                    <span class="bs-stepper-label">Personal Details</span>
                                </button>
                            </div>
                            <div class="line"></div>
                            <div class="step" data-target="#address-info">
                                <button type="button" class="step-trigger" role="tab" aria-controls="address-info" id="address-info-trigger">
                                    <span class="bs-stepper-circle">2</span>
                                    <span class="bs-stepper-label">Address</span>
                                </button>
                            </div>
                            <div class="line"></div>
                            <div class="step" data-target="#education-info">
                                <button type="button" class="step-trigger" role="tab" aria-controls="education-info" id="education-info-trigger">
                                    <span class="bs-stepper-circle">3</span>
                                    <span class="bs-stepper-label">Education and Experience</span>
                                </button>
                            </div>
                        </div>
                        <div class="bs-stepper-content">
                            <!-- your steps content here -->
                            <div id="personal-info" class="content" role="tabpanel" aria-labelledby="personal-info-trigger">
                                <!-- Personal Info Form Fields -->

                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label" for="FullName">Full Name:  @Html.ValidationMessageFor(model => model.FullName, "*", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                @Html.HiddenFor(model => model.CandidateCode, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.HiddenFor(model => model.EnqStatusId, new { htmlAttributes = new { @class = "form-control" } })
                                                <span class="input-group-text"><i class="fas fa-user"></i></span>
                                            </div>
                                            @Html.EditorFor(model => model.FullName, new
                                            {
                                                htmlAttributes = new
                                       {
                                           @class = "form-control",
                                           @id = "FullName",
                                           @placeholder = "Enter Name",
                                           @required = "required",
                                           @pattern = "^[a-zA-Z\\s]+$",
                                           @title = "Only alphabets and spaces are allowed",
                                           onkeydown = "return (event.key === 'Backspace' ||  /^[a-zA-Z\\s]$/.test(event.key))"
                                       }
                                            })
                                        </div>

                                    </div>

                                    <label class="col-sm-2 col-form-label" for="Gender">Gender:  @Html.ValidationMessageFor(model => model.Gender, "*", new { @class = "text-danger" })</label>
                                    <div class="form-group">
                                        <div class="form-group clearfix">
                                            <div class="radio icheck-primary d-inline">
                                                <input type="radio" id="Male" name="gender" value="Male">
                                                <label for="Male" style="display: inline;">Male</label>
                                            </div>
                                            <div class="radio icheck-primary d-inline">
                                                <input type="radio" id="Female" name="gender" value="Female">
                                                <label for="Female" style="display: inline;">Female</label>
                                            </div>
                                            <div class="radio icheck-primary d-inline">
                                                <input type="radio" id="Other" name="gender" value="Other">
                                                <label for="Other" style="display: inline;">Other</label>
                                            </div>
                                        </div>
                                    </div>


                                </div>

                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label" for="EmailId">Email Id:    @Html.ValidationMessageFor(model => model.EmailId, "*", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                            </div>
                                            @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", @id = "EmailId", @required = "required", @type = "email" } })
                                        </div>
                                    </div>

                                    <label class="col-sm-2 col-form-label" for="StudMobileNo">Contact No:   @Html.ValidationMessageFor(model => model.ContactNumber, "*", new { @class = "text-danger" })</label>

                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-phone"></i></span>

                                                @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control", @placeholder = "Contact Number", style = "width:280px;", id = "StudMobileNo", @pattern = "\\d{10}", @title = "Enter a 10-digit mobile number", @onkeydown = "return (event.key === 'Backspace' || /^[0-9]$/.test(event.key))", @oninput = "validatePhoneNumber(this)" } })
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label" for="alternatenumber">Alternate No:    @Html.ValidationMessageFor(model => model.AlternateNumber, "", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-phone"></i></span>

                                                @Html.EditorFor(model => model.AlternateNumber, new
                                                {
                                                    htmlAttributes = new
                                           {
                                               @class = "form-control",
                                               @placeholder = "Alternate Number",
                                               Style = "width:280px;",
                                               id = "AlternateNumber",
                                               @pattern = "\\d{10}",
                                               @title = "Enter a 10-digit mobile number",
                                               onkeydown = "return (event.key === 'Backspace' || /^[0-9]$/.test(event.key))"
                                           }
                                                })
                                            </div>

                                        </div>
                                    </div>

                                    <label class="col-sm-2 col-form-label" for="Profession"> Profession:   @Html.ValidationMessageFor(model => model.ProfessionalStatusId, "*", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-location-arrow"></i></span>
                                            </div>
                                            @Html.DropDownListFor(model => model.ProfessionalStatusId, new SelectList(ViewBag.Professional, "Value", "Text"), "--- Select Profession ---", new { @class = "form-control", @id = "ProfessionalStatusId" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label" for="description"> Description:     @Html.ValidationMessageFor(model => model.EquiryDescription, "", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-user"></i></span>
                                            </div>
                                            @Html.TextAreaFor(model => model.EquiryDescription, new { htmlAttributes = new { @class = "form-control", @id = "AlternateNumber", @pattern = "\\d{10}" } })
                                        </div>

                                    </div>

                                    <label class="col-sm-2 col-form-label" for="EnquiryDate">
                                        Enquiry Date: @Html.ValidationMessageFor(model => model.EnquiryDate, "*", new { @class = "text-danger" })
                                    </label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                                            </div>
                                            @Html.EditorFor(model => model.EnquiryDate, new
                                            {
                                                htmlAttributes = new
                                                {
                                                    @class = "form-control",
                                                    id = "EnquiryDate",
                                                    style = "width:230px;",
                                                    max = DateTime.Today.ToString("yyyy-MM-dd"),
                                                    @readonly = "readonly",
                                                    @disabled = "disabled"
                                                }
                                            })
                                        </div>


                                    </div>
                                </div>

                                <button class="btn btn-primary btn-sm" type="button" onclick="location.href='@Url.Action("EnquiryListSks", "Counsellor")'">Back</button>
                                <button class="btn btn-primary btn-sm" type="button" id="Nextbutton">Next</button>
                            </div>
                            <div id="address-info" class="content" role="tabpanel" aria-labelledby="address-info-trigger">
                                <!---------Steper 2 start-->
                                <!-- Address Info Form Fields -->

                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label" for="AlternateNumber">Permanent Address:    @Html.ValidationMessageFor(model => model.PermanentAddress, "*", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-address-book"></i></span>
                                            </div>
                                            @Html.TextAreaFor(model => model.PermanentAddress, new { htmlAttributes = new { @class = "form-control", @id = "PermanentAddress", @pattern = "\\d{10}" } })


                                        </div>
                                    </div>

                                    <label class="col-sm-2 col-form-label" for="EmailId">Permanent Pincode:    @Html.ValidationMessageFor(model => model.PermanentPincode, "*", new { @class = "text-danger", @id = "" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-landmark"></i></span>
                                            </div>
                                            @Html.EditorFor(model => model.PermanentPincode, new
                                            {
                                                htmlAttributes = new
                                       {
                                           @class = "form-control",
                                           @placeholder = "Enter Pincode",
                                           style = "width:200px;",
                                           id = "PermanentPincode",
                                           @pattern = "\\d{6}",
                                           @onkeydown = "return (event.key === 'Backspace' || /^[0-9]$/.test(event.key))",
                                           @oninput = "validatePhoneNumber(this)"
                                       }
                                            })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-md-4">
                                        <h6><b>Permanent Country:@Html.ValidationMessageFor(model => model.CountryId, "*", new { @class = "text-danger" })</b></h6>
                                        @Html.DropDownList("Country", (IEnumerable<SelectListItem>)ViewBag.PermanatCountry, "---Select Country---", new { @class = "form-control", id = "PermanentCountry" })
                                    </div>

                                    <div class="col-md-4">
                                        <h6><b> Permanent State:@Html.ValidationMessageFor(model => model.State, "*", new { @class = "text-danger" })</b></h6>
                                        <select id="PermanentState" name="State" class="form-control">
                                            <option value="">---Select State---</option>
                                        </select>
                                    </div>

                                    <div class="col-md-4">
                                        <h6><b>Permanent City:@Html.ValidationMessageFor(model => model.City, "*", new { @class = "text-danger" })</b></h6>
                                        <select id="PermanentCity" name="CityId" class="form-control">
                                            <option value="">---Select City---</option>-

                                        </select>
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-sm-12">
                                        <input type="checkbox" id="sameAsPermanent" />
                                        <label for="sameAsPermanent">Same as Permanent </label>
                                    </div>
                                </div>

                                <script>
                                    document.getElementById('sameAsPermanent').addEventListener('change', function () {
                                        if (this.checked) {
                                            // Copy values from permanent to present
                                            document.getElementById('PresentAddress').value = document.getElementById('PermanentAddress').value;
                                            document.getElementById('PresentPincode').value = document.getElementById('PermanentPincode').value;
                                            document.getElementById('PresentCountry').value = document.getElementById('PermanentCountry').value;

                                            // Trigger change event to load states and cities based on selected country
                                            document.getElementById('PresentCountry').dispatchEvent(new Event('change'));

                                            // Copy the state and city (after they are loaded)
                                            setTimeout(function () {
                                                document.getElementById('PresentState').value = document.getElementById('PermanentState').value;
                                                document.getElementById('PresentState').dispatchEvent(new Event('change'));

                                                setTimeout(function () {
                                                    document.getElementById('PresentCity').value = document.getElementById('PermanentCity').value;
                                                }, 1000); // Wait for city options to load
                                            }, 1000); // Wait for state options to load

                                        } else {
                                            // Clear the present address fields if unchecked
                                            document.getElementById('PresentAddress').value = '';
                                            document.getElementById('PresentPincode').value = '';
                                            document.getElementById('PresentCountry').value = '';
                                            document.getElementById('PresentState').innerHTML = '<option value="">---Select State---</option>';
                                            document.getElementById('PresentCity').innerHTML = '<option value="">---Select City---</option>';
                                        }
                                    });

                                    // Example functions to load states and cities (Assuming these exist)
                                    document.getElementById('PresentCountry').addEventListener('change', function () {
                                        var countryId = this.value;
                                        // Fetch and populate states based on selected country
                                        loadStates(countryId, 'PresentState');
                                    });

                                    document.getElementById('PresentState').addEventListener('change', function () {
                                        var stateId = this.value;
                                        // Fetch and populate cities based on selected state
                                        loadCities(stateId, 'PresentCity');
                                    });

                                    function loadStates(countryId, stateDropdownId) {
                                        // Example AJAX call to fetch states based on countryId
                                        // Populate the state dropdown
                                        // Assuming server returns a list of states in JSON format
                                        /*
                                        $.ajax({
                                            url: '/path/to/your/api/states',
                                            data: { countryId: countryId },
                                            success: function(states) {
                                                var stateDropdown = document.getElementById(stateDropdownId);
                                                stateDropdown.innerHTML = '';
                                                states.forEach(function(state) {
                                                    var option = document.createElement('option');
                                                    option.value = state.id;
                                                    option.text = state.name;
                                                    stateDropdown.appendChild(option);
                                                });
                                            }
                                        });
                                        */
                                    }

                                    function loadCities(stateId, cityDropdownId) {
                                        // Example AJAX call to fetch cities based on stateId
                                        // Populate the city dropdown
                                        // Assuming server returns a list of cities in JSON format
                                        /*
                                        $.ajax({
                                            url: '/path/to/your/api/cities',
                                            data: { stateId: stateId },
                                            success: function(cities) {
                                                var cityDropdown = document.getElementById(cityDropdownId);
                                                cityDropdown.innerHTML = '';
                                                cities.forEach(function(city) {
                                                    var option = document.createElement('option');
                                                    option.value = city.id;
                                                    option.text = city.name;
                                                    cityDropdown.appendChild(option);
                                                });
                                            }
                                        });
                                        */
                                    }
                                </script>


                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label" for="FatherName">Present Address:  @Html.ValidationMessageFor(model => model.PresentAddress, "*", new { @class = "text-danger" }) </label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-landmark"></i></span>
                                            </div>
                                            @Html.TextAreaFor(model => model.PresentAddress, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "PresentAddress" } })
                                        </div>
                                    </div>

                                    <label class="col-sm-2 col-form-label" for="FatherContactNo">Present Pincode:   @Html.ValidationMessageFor(model => model.PresentPincode, "*", new { @class = "text-danger" })</label>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-landmark"></i></span>
                                            </div>
                                            @Html.EditorFor(model => model.PresentPincode, new
                                       {
                                           htmlAttributes = new
                                           {
                                               @class = "form-control",
                                               @placeholder = "Enter Pincode",
                                               style = "width:200px;",
                                               id = "PresentPincode",
                                               @pattern = "\\d{6}",
                                               @onkeydown = "return (event.key === 'Backspace' || /^[0-9]$/.test(event.key))",
                                               @oninput = "validatePhoneNumber(this)"
                                           }
                                       })
                                        </div>

                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-md-4">
                                        <h6><b>Present Country:  @Html.ValidationMessageFor(model => model.CountryId, "*", new { @class = "text-danger" })</b></h6>
                                        @Html.DropDownList("country", (IEnumerable<SelectListItem>)ViewBag.Country, "---Select Country---", new { @class = "form-control", id = "PresentCountry" })
                                    </div>

                                    <div class="col-md-4">
                                        <h6><b>Present State:@Html.ValidationMessageFor(model => model.State, "*", new { @class = "text-danger" })</b></h6>
                                        <select id="PresentState" name="state" class="form-control">
                                            <option value="">---Select State---</option>
                                        </select>
                                    </div>

                                    <div class="col-md-4">
                                        <h6><b>Present City: @Html.ValidationMessageFor(model => model.City, "*", new { @class = "text-danger" }) </b></h6>
                                        <select id="PresentCity" name="City" class="form-control">
                                            <option value="">---Select City---</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- More Address Info Fields -->
                                <button class="btn btn-primary btn-sm" type="button" onclick="stepper.previous()">Previous</button>
                                <button class="btn btn-primary btn-sm" type="button" id="Step2NxtButton">Next</button>
                            </div>
                            <div id="education-info" class="content" role="tabpanel" aria-labelledby="education-info-trigger">

                                <!-- Education Info Form Fields -->
                                <div class="container">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <div class="form-group clearfix">
                                                <div class="checkbox icheck-primary d-inline">
                                                    <input type="checkbox" id="SSC" name="education" value="SSC">
                                                    <label for="SSC" style="display: inline;">SSC</label>
                                                </div>
                                                <div class="checkbox icheck-primary d-inline">
                                                    <input type="checkbox" id="HSC" name="education" value="HSC">
                                                    <label for="HSC" style="display: inline;">HSC</label>
                                                </div>
                                                <div class="checkbox icheck-primary d-inline">
                                                    <input type="checkbox" id="Diploma" name="education" value="Diploma">
                                                    <label for="Diploma" style="display: inline;">Diploma</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label" for="Graduation">Graduation:   @Html.ValidationMessageFor(model => model.Graduation, "*", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-school"></i></span>
                                                </div>
                                                @Html.DropDownList("Graduation", (IEnumerable<SelectListItem>)ViewBag.Graduation, "---Select Graduation---", new { @class = "form-control", @required = "required", @id = "Graduation" })
                                            </div>

                                        </div>

                                        <label class="col-sm-2 col-form-label" for="PostGraduation">Post Graduation: @Html.ValidationMessageFor(model => model.PostGraduation, "", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-school"></i></span>
                                                </div>
                                                <select id="PostGraduation" name="PostGraduation" class="form-control"></select>
                                            </div>
                                        </div>
                                    </div>


                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label" for="CompanyName">Company Name:  @Html.ValidationMessageFor(model => model.CompanyName, "*", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-home"></i></span>
                                                </div>
                                                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @id = "FullName", @required = "required" } })
                                            </div>

                                        </div>

                                        <label class="col-sm-2 col-form-label" for="Department">Department: @Html.ValidationMessageFor(model => model.Department, "*", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-location-arrow"></i></span>
                                                </div>
                                                @Html.DropDownListFor(model => model.DepartmentId, new SelectList(ViewBag.Department, "Value", "Text"), "---Select ---", new { @class = "form-control", @required = "required", @id = "DepartmentId" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2" for="Designation">Designation: @Html.ValidationMessageFor(model => model.Designation, "*", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-location-arrow"></i></span>
                                                </div>
                                                @Html.DropDownListFor(model => model.DesignationId, new SelectList(ViewBag.Designation, "Value", "Text"), "---Select ---", new { @class = "form-control", @required = "required", @id = "DesignationId" })
                                            </div>
                                        </div>

                                        <label class="col-sm-2 col-form-label" for="CTC">CTC:  @Html.ValidationMessageFor(model => model.CTC, "*", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-dollar"></i></span>
                                                </div>
                                                @Html.EditorFor(model => model.CTC, new { htmlAttributes = new { @class = "form-control", @id = "CTC", @required = "required" } })
                                            </div>

                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label class="col-sm-2 " for="ExpectedSalary">Expected Salary:    @Html.ValidationMessageFor(model => model.ExpectedSalary, "*", new { @class = "text-danger" })</label>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text"><i class="fas fa-dollar"></i></span>
                                                </div>
                                                @Html.EditorFor(model => model.ExpectedSalary, new { htmlAttributes = new { @class = "form-control", @id = "ExpectedSalary", @required = "required" } })

                                            </div>
                                        </div>
                                    </div>


                                </div>

                                <!-- Add your education fields here -->
                                <button class="btn btn-primary btn-sm" type="button" onclick="stepper.previous()">Previous</button>
                                <div class="container" style="margin-right:-450px;">
                                    <button type="button" id="submitButton" class="btn btn-success btn-sm"> Update</button>
                                    <button type="button" class="btn btn-danger btn-sm" id="cancel-button" onclick="goBack()">Cancel</button>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<script>
    var existingGender = '@Model.Gender'; // Adjust as needed
    // Set the checked radio button
    if (existingGender) {
        $('input[name="gender"][value="' + existingGender + '"]').prop('checked', true);
    }

    function goBack() {
        // Using SweetAlert for confirmation
        Swal.fire({
            title: 'Are you sure?',
            //text: 'You will not be able to undo this action!',
            icon: 'warning',
            //showCancelButton: true,
            confirmButtonColor: '#d33',
            //cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Add any form cancellation logic here if needed

                // Redirect to the specified URL
                window.location.href = '@Url.Action("EnquiryListSks", "Counsellor")';
            }
        });
    }
</script>

<!-- BS-Stepper -->

<script src="~/Content/plugins/bs-stepper/js/bs-stepper.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        window.stepper = new Stepper(document.querySelector('.bs-stepper'))
    });

</script>

@Scripts.Render("~/bundles/jqueryval")

@*<script src="~/Scripts/jquery-3.4.1.min.js"></script>*@
<script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>
<link href="~/Content/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />
<script src="~/Content/Admin/js/Icon.js"></script>
<!-- Include SweetAlert CSS and JS files -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/Content/plugins/jquery-validation/jquery.validate.min.js"></script>
<script>
  $(document).ready(function () {
    // Setting initial values from ViewBag
    $('#PresentCountry').val('@Html.Raw(@ViewBag.PreCountryId)');
    $('#PermanentCountry').val('@Html.Raw(@ViewBag.PrmCountryId)');
    $('#PresentCity').val('@Html.Raw(@ViewBag.PreCityId)');
    $('#PermanentCity').val('@Html.Raw(@ViewBag.PrmCityId)');
    $('#ProfessionalStatusId').val('@Html.Raw(@ViewBag.proProfessionalStatusId)');
    $('#Graduation').val('@Html.Raw(@ViewBag.graGraduation)');
    $('#PostGraduation').val('@Html.Raw(@ViewBag.poPostGraduationId)');
    $('#DepartmentId').val('@Html.Raw(@ViewBag.drDepartmentId)');
    $('#DesignationId').val('@Html.Raw(@ViewBag.dpDesignationId)');

      // Populating states and cities


    populateStates();
    populateCities();
    populatePermanentStates();
    populatePermanentCities();
    populatePostGraduation();

    // Function to populate present statesPresentState
    function populateStates() {
        var countryId = $("#PresentCountry").val();
        var stateId = '@Html.Raw(@ViewBag.PreStateId)';
        $("#PresentState").empty();
        $.post("/Counsellor/GetStateNameSk", { CountryId: countryId }, function (data) {
            var options = "<option value=''>---Select State---</option>";
            $.each(data, function (index, state) {
                options += "<option value='" + state.Value + "'>" + state.Text + "</option>";
            });
            $("#PresentState").html(options);
            $("#PresentState").val(stateId);
        }).fail(function () {
            console.error("Error loading states for country ID:", countryId);
        });
    }

    // Function to populate present cities
    function populateCities() {
        var stateId = '@Html.Raw(@ViewBag.PreStateId)';
        var cityId = '@Html.Raw(@ViewBag.PreCityId)';
        $("#PresentCity").empty();
        $.get("/Counsellor/GetCityNameSk", { StateId: stateId }, function (data) {
            var options = "<option value=''>---Select City---</option>";
            $.each(data, function (index, city) {
                options += "<option value='" + city.Value + "'>" + city.Text + "</option>";
            });
            $("#PresentCity").html(options);
            $("#PresentCity").val(cityId);
        }).fail(function () {
            console.error("Error loading cities for state ID:", stateId);
        });
    }

    // Function to populate permanent states
    function populatePermanentStates() {
        var countryId = $("#PermanantCountry").val();
        var stateId = '@Html.Raw(@ViewBag.PrmStateId)';
        $("#PermanentState").empty();
        $.post("/Counsellor/GetPermanantStateNameSk", { CountryId: countryId }, function (data) {
            var options = "<option value=''>---Select State---</option>";
            $.each(data, function (index, state) {
                options += "<option value='" + state.Value + "'>" + state.Text + "</option>";
            });
            $("#PermanentState").html(options);
            $("#PermanentState").val(stateId);
        }).fail(function () {
            console.error("Error loading states for country ID:", countryId);
        });
    }

    // Function to populate permanent cities
    function populatePermanentCities() {
        var stateId = '@Html.Raw(@ViewBag.PrmStateId)';
        var cityId = '@Html.Raw(@ViewBag.PrmCityId)';
        $("#PermanentCity").empty();
        $.get("/Counsellor/GetPermanantCityNameSk", { StateId: stateId }, function (data) {
            var options = "<option value=''>---Select City---</option>";
            $.each(data, function (index, city) {
                options += "<option value='" + city.Value + "'>" + city.Text + "</option>";
            });
            $("#PermanentCity").html(options);
            $("#PermanentCity").val(cityId);
        }).fail(function () {
            console.error("Error loading cities for state ID:", stateId);
        });
    }

    // Function to populate post graduation based on graduation selection
    function populatePostGraduation() {
        var graduationId = $("#Graduation").val();
        var postGraduationId = '@Html.Raw(@ViewBag.poPostGraduationId)';
        $("#PostGraduation").empty();
        $.post("/Counsellor/GetPostGraduationSK", { GraduationId: graduationId }, function (data) {
            var options = "<option value=''>---Select PostGraduation---</option>";
            $.each(data, function (index, postGrad) {
                options += "<option value='" + postGrad.Value + "'>" + postGrad.Text + "</option>";
            });
            $("#PostGraduation").html(options);
            $('#PostGraduation').val(postGraduationId);
        }).fail(function () {
            console.error("Error loading post graduations for graduation ID:", graduationId);
        });
    }

    // Event handler for Present Country change
    $("#PresentCountry").change(function () {
        var countryId = $(this).val();
        $("#PresentState").empty();
        $.post("/Counsellor/GetStateNameSk", { CountryId: countryId }, function (data) {
            var options = "<option value=''>---Select State---</option>";
            $.each(data, function (index, state) {
                options += "<option value='" + state.Value + "'>" + state.Text + "</option>";
            });
            $("#PresentState").html(options);
        }).fail(function () {
            console.error("Error loading states for country ID:", countryId);
        });
    });

    // Event handler for Present State change
    $("#PresentState").change(function () {
        var stateId = $(this).val();
        $("#PresentCity").empty();
        $.get("/Counsellor/GetCityNameSk", { StateId: stateId }, function (data) {
            var options = "<option value=''>---Select City---</option>";
            $.each(data, function (index, city) {
                options += "<option value='" + city.Value + "'>" + city.Text + "</option>";
            });
            $("#PresentCity").html(options);
        }).fail(function () {
            console.error("Error loading cities for state ID:", stateId);
        });
    });

    // Event handler for Permanent Country change
    $('#PermanentCountry').change(function () {
        var countryId = $(this).val();
        $('#PermanentState').empty();
        $.post("/Counsellor/GetPermanantStateNameSk", { CountryId: countryId }, function (data) {
            var options = "<option value=''>---Select State---</option>";
            $.each(data, function (index, state) {
                options += "<option value='" + state.Value + "'>" + state.Text + "</option>";
            });
            $('#PermanentState').html(options);
        }).fail(function () {
            console.error("Error loading states for country ID:", countryId);
        });
    });

    // Event handler for Permanent State change
    $("#PermanentState").change(function () {
        var stateId = $(this).val();
        $("#PermanentCity").empty();
        $.get("/Counsellor/GetPermanantCityNameSk", { StateId: stateId }, function (data) {
            var options = "<option value=''>---Select City---</option>";
            $.each(data, function (index, city) {
                options += "<option value='" + city.Value + "'>" + city.Text + "</option>";
            });
            $("#PermanentCity").html(options);
        }).fail(function () {
            console.error("Error loading cities for state ID:", stateId);
        });
    });

    $("#Graduation").change(function () {
        var id = $(this).val();
        $("#PostGraduation").empty();
        $.post("/Counsellor/GetPostGraduationSK", { GraduationId: id }, function (data) {
            var v = "<option value= ''>---Select PostGraduation---</option>";
            $.each(data, function (i, v1) {
                v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
            });
            $("#PostGraduation").html(v);
        });
    });

    // Date validation for equityDate input
    var equityDateInput = document.getElementById("equityDate");
    if (equityDateInput) {
        var today = new Date().toISOString().split('T')[0];
        equityDateInput.setAttribute('min', today);
        equityDateInput.setAttribute('max', today);

        // Form submission validation for equityDate
        $("form").submit(function (event) {
            var equityDateValue = equityDateInput.value;
            if (equityDateValue !== today) {
                $("#equityDateError").text("* Please select today's date.");
                event.preventDefault(); // Prevent form submission if validation fails
            } else {
                $("#equityDateError").text("");
            }
        });
    }

    // Custom form submit handler with AJAX
    $('#submitButton').click(function (e) {
        e.preventDefault(); // Prevent the default form submission
        var formData = $('#myform').serialize();
        $.ajax({
            url: '@Url.Action("UpdateEnquirySks", "Counsellor")',
            type: 'POST',
            data: formData,
            success: function (response) {
                Swal.fire(response.success);
                window.location.href = document.referrer;
            },
            error: function (xhr, status, error) {
                Swal.fire('An error occurred: ' + xhr.responseText);
            }
        });
    });

    // Checkbox validation for SSC
    $('form').on('submit', function (event) {
        var checkbox = $('input[name="SSC"]');
        if (!checkbox.prop('checked')) {
            event.preventDefault();
            alert('Please check the box.');
        }
    });
});


// Assume validateForm is a function defined elsewhere

</script>

<script>
    $(function () {
        var existingGender = '@Model.Gender';
        $('input[name="gender"][value="' + existingGender + '"]').prop('checked', true);
    });
</script>

<script>
    $(document).ready(function () {
        $('#PermanentPincode').on('input', function () {
            var val = $(this).val();
            var numericVal = val.replace(/\D/g, ''); // Remove non-digit characters
            $(this).val(numericVal);

            // Optionally, you can add additional logic here for length checks, etc.
            // Limit to 6 digits (optional)
            if (numericVal.length > 6) {
                $(this).val(numericVal.slice(0, 6));
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        $('#PresentPincode').on('input', function () {
            var val = $(this).val();
            var numericVal = val.replace(/\D/g, ''); // Remove non-digit characters
            $(this).val(numericVal);

            // Optionally, you can add additional logic here for length checks, etc.
            // Limit to 6 digits (optional)
            if (numericVal.length > 6) {
                $(this).val(numericVal.slice(0, 6));
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        $('#AlternateNumber').on('input', function () {
            var inputValue = $(this).val().trim();
            var sanitizedValue = inputValue.replace(/\D/g, ''); // Remove non-digit characters

            // Limit input to 10 digits
            if (sanitizedValue.length > 10 || sanitizedValue.length < 10) {
                sanitizedValue = sanitizedValue.substr(0, 10);
            }
            // Update input value with sanitized version
            $(this).val(sanitizedValue);

            // Set validation message based on length
            if (sanitizedValue.length !== 10) {
                $(this)[0].setCustomValidity('Contact number must be exactly 10 digits.');
            }

            else {
                $(this)[0].setCustomValidity('');
            }
        });
    });
</script>

<script>
    $(document).ready(function () {
        $('#StudMobileNo').on('input', function () {
            var inputValue = $(this).val().trim();
            var sanitizedValue = inputValue.replace(/\D/g, ''); // Remove non-digit characters

            // Limit input to 10 digits
            if (sanitizedValue.length > 10) {
                sanitizedValue = sanitizedValue.substr(0, 10);
            }
            if (sanitizedValue.length >= 10) {
                sanitizedValue = sanitizedValue.substr(0, 10);
            }

            // Update input value with sanitized version
            $(this).val(sanitizedValue);

            // Set validation message based on length
            if (sanitizedValue.length !== 10) {
                $(this)[0].setCustomValidity('Contact number must be exactly 10 digits.');
            }
            if (sanitizedValue.length >= 10) {
                $(this)[0].setCustomValidity('Contact number must be enter 10 digits.');
            }
            else {
                $(this)[0].setCustomValidity('');
            }
        });
    });
</script>

<script>

    $('#CTC').on('input', function () {

        var val = $(this).val();
        // var numericVal = val.replace(/\D/g, ''); // Remove non-digit characters
        $(this).val(numericVal);

        // Optionally, you can add additional logic here for length checks, etc.
        // Limit to 6 digits (optional)
        if (numericVal.length > 10) {
            $(this).val(numericVal.slice(0, 10));
        }
    });

    $('#ExpectedSalary').on('input', function () {

        var val = $(this).val();
        //  var numericVal = val.replace(/\D/g, ''); // Remove non-digit characters
        $(this).val(numericVal);

        // Optionally, you can add additional logic here for length checks, etc.
        // Limit to 6 digits (optional)
        if (numericVal.length > 10) {
            $(this).val(numericVal.slice(0, 10));
        }
    });

</script>
<script>
    $(document).ready(function () {
        $('#PermanentPincode').on('input', function () {
            var val = $(this).val();
            var numericVal = val.replace(/\D/g, ''); // Remove non-digit characters
            $(this).val(numericVal);

            // Optionally, you can add additional logic here for length checks, etc.
            // Limit to 6 digits (optional)
            if (numericVal.length > 6) {
                $(this).val(numericVal.slice(0, 6));
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        $('#PresentPincode').on('input', function () {
            var val = $(this).val();
            var numericVal = val.replace(/\D/g, ''); // Remove non-digit characters
            $(this).val(numericVal);

            // Optionally, you can add additional logic here for length checks, etc.
            // Limit to 6 digits (optional)
            if (numericVal.length > 6) {
                $(this).val(numericVal.slice(0, 6));
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        $('#AlternateNumber').on('input', function () {
            var inputValue = $(this).val().trim();
            var sanitizedValue = inputValue.replace(/\D/g, ''); // Remove non-digit characters

            // Limit input to 10 digits
            if (sanitizedValue.length > 10 || sanitizedValue.length < 10) {
                sanitizedValue = sanitizedValue.substr(0, 10);
            }
            // Update input value with sanitized version
            $(this).val(sanitizedValue);

            // Set validation message based on length
            if (sanitizedValue.length !== 10) {
                $(this)[0].setCustomValidity('Contact number must be exactly 10 digits.');
            }

            else {
                $(this)[0].setCustomValidity('');
            }
        });
    });
</script>

<script>
    $(document).ready(function () {
        $('#StudMobileNo').on('input', function () {
            var inputValue = $(this).val().trim();
            var sanitizedValue = inputValue.replace(/\D/g, ''); // Remove non-digit characters

            // Limit input to 10 digits
            if (sanitizedValue.length > 10) {
                sanitizedValue = sanitizedValue.substr(0, 10);
            }
            if (sanitizedValue.length >= 10) {
                sanitizedValue = sanitizedValue.substr(0, 10);
            }

            // Update input value with sanitized version
            $(this).val(sanitizedValue);

            // Set validation message based on length
            if (sanitizedValue.length !== 10) {
                $(this)[0].setCustomValidity('Contact number must be exactly 10 digits.');
            }
            if (sanitizedValue.length >= 10) {
                $(this)[0].setCustomValidity('Contact number must be enter 10 digits.');
            }
            else {
                $(this)[0].setCustomValidity('');
            }
        });
    });
</script>

<script>
    $(document).ready(function () {
        // Initialize the stepper
        stepper = new Stepper($('.bs-stepper')[0]);

        // Handle Next button click
        $('#Nextbutton').on('click', function () {

            if (validateForm()) {
                stepper.next();
            }
        });
    });
    // Function to validate the form
    function validateForm() {
        var isValid = true;

        // Validate each required field individually
        var fullName = $('#FullName').val().trim();
        var gender = $('input[name="gender"]:checked').val();
        var email = $('#EmailId').val().trim();
        var studMobileNo = $('#StudMobileNo').val().trim();
        var alternateNumber = $('#AlternateNumber').val().trim();
        var profession = $('#ProfessionalStatusId').val();
        /* var enquirySource = $('#EnquirySourceId').val();*/
        // var equiryDescription = $('#EquiryDescription').val();


        // Validate Full Name
        if (fullName === "" || !isValidName(fullName)) {
            toastr.error("Invalid Full Name");
            isValid = false;
        }

        // Validate Gender
        if (!gender) {
            toastr.error("Please select a Gender");
            isValid = false;
        }

        // Validate Email
        if (email === "" || !isValidEmail(email)) {
            toastr.error("Invalid Email");
            isValid = false;
        }

        // Validate Mobile No
        if (studMobileNo === "" || !isValidMobileNo(studMobileNo)) {
            toastr.error("Invalid Mobile No");
            isValid = false;
        }

        //if (alternateNumber === "" || !isValidMobileNo(alternateNumber)) {
        //    toastr.error("Invalid Alternate Number No");
        //    isValid = false;
        //}

        // Validate Profession
        if (!profession) {
            toastr.error("Please select a Profession");
            isValid = false;
        }

        //// Validate Enquiry Source
        //if (!enquirySource) {
        //    toastr.error("Please select an Enquiry Source");
        //    isValid = false;
        //}


        // Validate Equiry Description
        //if (!equiryDescription) {
        //    toastr.error("Please select an Equiry Description");
        //    isValid = false;
        //}


        // Custom validation functions
        function isValidEmail(email) {
            var emailRegex = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            return emailRegex.test(email);
        }

        function isValidName(name) {
            var nameRegex = /^[a-zA-Z\s]+$/;
            return nameRegex.test(name);
        }

        function isValidMobileNo(mobileNo) {
            var mobileNoRegex = /^\d{10}$/;
            return mobileNoRegex.test(mobileNo);
        }

        // Display success message if valid
        if (isValid) {
            toastr.success("Form validated successfully!");
        }
        return isValid;
    }


</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Initialize the stepper
        window.stepper = new Stepper($('.bs-stepper')[0]);
        // Handle Next button click
        $('#Step2NxtButton').on('click', function (e) {
            // Prevent default action of the button
            e.preventDefault();

            // Perform validation
            if (validateAddressForm()) {
                // If validation is successful, proceed to the next step
                stepper.next();
            }
        });
        // Function to validate the address form
        function validateAddressForm() {
            var isValid = true;

            // Retrieve values from form fields
            var permanentAddress = $('#PermanentAddress').val();
            var permanentPincode = $('#PermanentPincode').val().trim();
            var permanentCountry = $('#PermanentCountry').val();
            var permanentState = $('#PermanentState').val();
            var permanentCity = $('#PermanentCity').val();
            var presentAddress = $('#PresentAddress').val().trim();
            var presentPincode = $('#PresentPincode').val().trim();
            var presentCountry = $('#PresentCountry').val();
            var presentState = $('#PresentState').val();
            var presentCity = $('#PresentCity').val();

            // Clear previous error messages
            $('.form-control').removeClass('is-invalid');
            $('.text-danger').remove();

            // Validate Permanent Address
            if (permanentAddress === "") {
                toastr.error("Permanent Address is required");
                $('#PermanentAddress');
                isValid = false;
            }


            // Validate Permanent Country
            if (permanentCountry === "" || permanentCountry === "---Select Country---") {
                toastr.error("Please select a Permanent Country");
                $('#PermanentCountry');
                isValid = false;
            }

            // Validate Permanent State
            if (permanentState === "" || permanentState === "---Select State---") {
                toastr.error("Please select a Permanent State");
                $('#PermanentState');
                isValid = false;
            }

            // Validate Permanent City
            if (permanentCity === "" || permanentCity === "---Select City---") {
                toastr.error("Please select a Permanent City");
                $('#PermanentCity');
                isValid = false;
            }

            // Validate Present Address
            if (presentAddress === "") {
                toastr.error("Present Address is required");
                $('#PresentAddress');
                isValid = false;
            }

            // Validate Present Pincode
            if (presentPincode === "" || !/^\d{6}$/.test(presentPincode)) {
                toastr.error("Please enter a valid Present Pincode (6 digits)");
                $('#PresentPincode');
                isValid = false;
            }

            // Validate Permanent Pincode
            if (permanentPincode === "" || !/^\d{6}$/.test(permanentPincode)) {
                toastr.error("Please enter a valid Permanent Pincode (6 digits)");
                $('#PermanantPincode');
                isValid = false;
            }

            // Validate Present Country
            if (presentCountry === "" || presentCountry === "---Select Country---") {
                toastr.error("Please select a Present Country");
                $('#PresentCountry');
                isValid = false;
            }

            // Validate Present State
            if (presentState === "" || presentState === "---Select State---") {
                toastr.error("Please select a Present State");
                $('#PresentState');
                isValid = false;
            }

            // Validate Present City
            if (presentCity === "" || presentCity === "---Select City---") {
                toastr.error("Please select a Present City");
                $('#PresentCity');
                isValid = false;
            }

            // Display success message if valid
            if (isValid) {
                toastr.success("Address information added successfully!");
            }
            return isValid;
        }
    });
</script>
