@model GSTEducationERPLibrary.Accountant.Accountant

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match Voucher</title>

    <script src="~/Content/plugins/bootstrap/js/bootstrap.min.js"></script>
    <link href="~/Content/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <script src="~/Content/plugins/select2/js/select2.full.min.js"></script>
    <link href="~/Content/plugins/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <script src="~/Content/plugins/sweetalert2/sweetalert2.all.min.js"></script>
    <link href="~/Content/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <script src="~/Content/plugins/toastr/toastr.min.js"></script>

    <style>


        h2 {
            padding-top: 10px;
            margin-bottom: 10px;
            font-family: Verdana;
            font-weight: bold;
            font-size: medium;
            color: #33CCCC;
        }

        /* Customize the Select2 dropdown */
        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background-color: #33CCCC;
            color: white;
        }

            .select2-container--default .select2-selection--multiple .select2-selection__choice:hover {
                background-color: #33CCCC;
                color: white;
            }

        #VoucherCode {
            font-size: 14px !important;
            color: black !important;
        }

        .required-field::after {
            content: "*";
            color: red;
            margin-left: 5px;
        }

        #Comment {
            height: 75%;
            width: 100% !important;
        }

        /* Responsive close button for modal */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
        }

        @@media (max-width: 576px) {
            #VoucherCode {
                width: 100% !important;
            }

            .input-group-text {
                display: none;
            }

            .icon video {
                width: 30px;
                height: 30px;
            }
        }
    </style>
</head>

<body>
    <div class="card mx-0 mt-2">
        <div class="card-header">
            <h2 class="card-title">MATCH TRANSACTION</h2>
        </div>

        <div class="card-body">
            <div class="form-group row">
                <label for="TransactionCode" class="col-md-4">Expense No. :</label>
                <div class="col-md-7">
                    @Html.EditorFor(model => model.TransactionCode, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    @Html.ValidationMessageFor(model => model.TransactionCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <label for="VendorName" class="col-md-4">Credited To:</label>
                <div class="col-md-7">
                    @Html.EditorFor(model => model.CreditTo, "Vendor Name :", new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                </div>
            </div>

            <div class="form-group row">
                <label for="TransactionAmount" class="col-md-4">Amount to pay:</label>
                <div class="input-group col-md-7">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-rupee-sign"></i></span>
                    </div>
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <label for="VoucherCode" class="col-md-4 required-field">Vouchers:</label>
                <input type="hidden" id="Context" value="matchVoucherMB" /> <!-- Set to "voucherModule" or "matchVoucher" -->

                <div class="col-md-7">
                    <select id="VoucherCode" class="form-control select2" multiple="multiple" data-placeholder="Select a voucher" style="width: 100%;">
                        <option value="">-select voucher-</option>
                        @foreach (var voucher in ViewBag.VoucherCode)
                        {
                            <option value="@voucher.Value">@voucher.Text</option>
                        }
                    </select>
                </div>

                <div class="col-md-1">
                    <a href="#" id="addvoucherButton" class="icon" data-url="@Url.Action("AddVoucherAsyncSGS", "Accountant")" title="Add Voucher">
                        <video id="AddVendorLink" width="40" height="40" playsinline loop muted>
                            <source src="~/Content/Admin/icon/add.mp4" type="video/mp4" />
                        </video>
                    </a>
                </div>
            </div>

            <div class="form-group row">
                <label class="col-md-4">Total Amount:</label>
                <div class="col-md-8">
                    <span>&#8377;</span>
                    <span id="totalAmountLabel">0.00</span>
                </div>
            </div>

            <div class="form-group row">
                <label for="TransactionAmount" class="col-md-4 required-field">Match Amount:</label>
                <div class="input-group col-md-7">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-rupee-sign"></i></span>
                    </div>
                    @if (Model.ExpenseName == "Salary")
                    {
                        @Html.EditorFor(model => model.TransactionAmount, new { htmlAttributes = new { @PlaceHolder = "Please Enter Amount Here..", @class = "form-control", @readonly = "true" } })
                    } else
                    {
                        @Html.EditorFor(model => model.TransactionAmount, new { htmlAttributes = new { @PlaceHolder = "Please Enter Amount Here..", @class = "form-control" } })
                    }

                    @Html.ValidationMessageFor(model => model.TransactionAmount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <label for="comment" class="col-md-4 required-field">Description:</label>
                <div class="col-md-7">
                    @Html.TextAreaFor(model => model.Comment, new { htmlAttributes = new { @id = "Comment", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="text-center">
                <button class="btn btn-success" id="SubmitAmounts">Submit</button>
                <a href="@Url.Action("ExpenseDashboardAsyncMB")" class="btn btn-danger">Cancel</a>
            </div>
        </div>

        <!-- Close button inside card for smaller screens -->
        <button class="close text-danger" data-dismiss="modal">&times;</button>
    </div>

    <script>

        jQuery(document).ready(function ($) {


            $('#VoucherCode').select2({
                placeholder: "Select Vouchers",
                allowClear: true
            });



          const modalSelector = '#BankModal';
            const formSelector = '#AddVoucherForm';

            // Open the Add Voucher modal
            $('#addvoucherButton').off('click').on('click', function () {
                const amountFor = $('#Amount').val();
                const context = $('#Context').val();

                $.ajax({
                    url: '@Url.Action("AddVoucherAsyncSGS", "Accountant")',
                    type: 'GET',
                    data: { voucherType: 2, amount: amountFor, context: context },
                    success: function (data) {
                        $(`${modalSelector} .modal-body`).html(data); // Populate modal body
                        $(modalSelector).modal('show'); // Show the modal
                    },
                    error: function () {
                        Swal.fire('Error', 'Failed to load the Add Voucher form.', 'error');
                    }
                });
            });

            // Handle form submission
            $(document).on('submit', formSelector, function (e) {
                e.preventDefault();
                const context = $('#Context').val();

                handleVoucherFormSubmission(formSelector, context, modalSelector);
            });

            // Ensure the modal is cleaned up on close
            $(modalSelector).on('hidden.bs.modal', function () {
                $(`${modalSelector} .modal-body`).html(''); // Clear modal content
            });
            function fetchvoucherMB() {

                const VendorCode = $('#VendorName option:selected').val();
                const staffcode = $('#StaffName option:selected').val();
                const ExpTypeID = $('#VoucherType option:selected').val();


                $.ajax({
                    url: '@Url.Action("ListVoucherAsyncMB", "Accountant")',
                    type: 'GET',
                    data: { VendorCode: VendorCode, staffcode: staffcode, ExpTypeID: ExpTypeID },
                    success: function (response) {
                        if (response.success) {

                            const $voucherSelect = $('#VoucherCode');
                            $voucherSelect.empty();
                            $voucherSelect.append('<option>-select voucher-</option>');

                            let newVoucherValue = null;

                            // Populate the dropdown with fetched vouchers
                            $.each(response.data, function (i, voucher) {
                                $voucherSelect.append('<option value="' + voucher.Value + '">' + voucher.Text + '</option>');
                                if (voucher.IsNew) {
                                    newVoucherValue = voucher.Value;
                                }
                            });

                            // Auto-select the newly created voucher if present
                            if (newVoucherValue) {
                                $voucherSelect.val(newVoucherValue).trigger('change');
                            }

                            displayToast("Fetched vouchers successfully.", "success");
                        } else {
                            displayToast("An error occurred while fetching vouchers.", "error");
                        }
                    },
                    error: function (xhr, status, error) {
                        displayToast("An error occurred while fetching the vouchers.", "error");
                    }
                });
            }
            //$('#addvoucherButton').on('click', function () {
            //    openModalWithPartialView();
            //});

            //function openModalWithPartialView() {
            //    const amoutfor = $('#Amount').val();
            //    $.ajax({
            //        url: '/Accountant/AddVoucherAsyncSGS',
            //        type: 'GET',
            //        data: { voucherType: 2, amount: amoutfor },
            //        success: function (data) {
            //            $('#BankModal .modal-body').html(data);
            //            var voucherStepper = new Stepper(document.querySelector('#VoucherStepper'));
            //            $('#BankModal').modal('show');
            //        }
            //    });
            //}

            function updateTotalAmount() {
                var totalAmount = 0;
                var inputAmount = parseFloat($('#Amount').val()) || 0;

                $('#VoucherCode option:selected').each(function () {
                    var text = $(this).text().trim();

                    var amountMatch = text.match(/^[^-]+-[^-]+-(\d+(\.\d+)?)/);
                    if (amountMatch) {
                        totalAmount += parseFloat(amountMatch[1]);
                    }
                });

                $('#totalAmountLabel').text(totalAmount.toFixed(2));
                var expenseName = '@Model.ExpenseName';

                  if (expenseName === 'Salary') {
                      $('#TransactionAmount').val(totalAmount.toFixed(2));
                  }


                // Change color based on the total amount comparison
                if (totalAmount >= inputAmount) {
                    $('#totalAmountLabel').css('color', 'green');
                    //$('#SubmitAmounts').prop('disabled', false); // Enable submit if amounts match or exceed
                    $('#VoucherCode option:not(:selected)').prop('disabled', true);
                } else {
                    $('#totalAmountLabel').css('color', 'red');
                    // $('#SubmitAmounts').prop('disabled', true); // Disable submit if total amount is less
                    $('#VoucherCode option:not(:selected)').prop('disabled', false);
                }

                // Ensure that if an amount exists, the submit button is visible (even if disabled)
                if (inputAmount > 0) {
                    $('#SubmitAmounts').show();
                }
            }


            // Call the function on dropdown change
            $(document).on('change', '#VoucherCode', function () {

                var text = $('#VoucherCode option:selected').text();
                var firstWordMatch = text.match(/^([^:]+):/);
                var amountMatch = text.match(/^[^-]+-[^-]+-(\d+(\.\d+)?)/);
                if (firstWordMatch && firstWordMatch[1] == 'CHEQUE') {
                    if (amountMatch) {
                        $('#TransactionAmount').val(amountMatch[1]);
                        $('#TransactionAmount').prop('disabled', true);
                    }
                }
                else {
                    if (amountMatch) {
                        $('#TransactionAmount').prop('disabled', false);
                    }
                }
                updateTotalAmount();
            });
            $('#BankModal').on('hidden.bs.modal', function () {
                $(this).find('.modal-body').empty(); // Clear modal content on close
                $(this).find('form').off(); // Unbind all events related to the modal
            });

        });
    </script>

    <script>
        $(document).ready(function () {
            $('#SubmitAmounts').off('click').on('click', function (e) {
                e.preventDefault(); // Prevent the default form submission
                var selectedVouchers = $('#VoucherCode').val();
                var paidAmount1 = parseFloat($('#TransactionAmount').val());
                var TranscationCode = $('#TransactionCode').val();
                let voucheramount = parseFloat($('#totalAmountLabel').text());
                var Description = $('#Comment').val();

                // Ensure that paidAmount1 is a valid number and greater than 0
                if (voucheramount > 0 && paidAmount1 > 0 && Description !== "" && paidAmount1 <= voucheramount) {
                    // SweetAlert confirmation
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to submit the payment?',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, submit it!',
                        cancelButtonText: 'No, cancel!',
                        backdrop: true,
                        allowOutsideClick: false,
                        position: "center"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Ensure the description is properly retrieved
                            var Description = $('#Comment').val();
                            // Disable the button to prevent multiple clicks
                            $('#SubmitAmounts').prop('disabled', true);

                            $.ajax({
                                url: '@Url.Action("UpdateTheVoucherAmountAsyncMB", "Accountant")',
                                type: 'POST',
                                data: {
                                    paidAmount: paidAmount1,
                                    voucherCodes: selectedVouchers,
                                    TranscationCode: TranscationCode,
                                    Description: Description
                                },
                                traditional: true,
                                success: function (response) {
                                    if (response.success) {
                                        Swal.fire({
                                            position: "center",
                                            icon: "success",
                                            title: "Payment successfully saved!",
                                            showConfirmButton: false,
                                            timer: 3000
                                        }).then(() => {
                                            window.location.href = response.redirectUrl;
                                        });
                                    } else {
                                        displayToast(response.message || 'Error allocating amount.', "error");
                                        $('#SubmitAmounts').prop('disabled', false);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    toastr.error('An error occurred while processing your request.');
                                    $('#SubmitAmounts').prop('disabled', false);
                                }
                            });
                        }
                    });
                } else {
                    // Handle all validation and display Toastr error messages
                    let message = "";
                    if (!voucheramount) message += "Please select a voucher for payment! ";
                    if (!paidAmount1 || isNaN(paidAmount1)) message += "Please fill in the amount to pay! ";
                    if (paidAmount1 > voucheramount) message += "Payment amount cannot be greater than the voucher amount! ";
                    if (!Description) message += "Please fill in the description! ";

                    if (message !== "") {
                        displayToast(message.trim(), "error");
                    }
                }
            });




            $('#TransactionAmount').on('input', function () {

                var enteredValue = $(this).val();
                var amount = $('#Amount').val();
                // Allow only numbers and dots
                var numericValue = enteredValue.replace(/[^0-9.]/g, '');

                // Ensure there's only one dot
                var parts = numericValue.split('.');
                if (parts.length > 2) {
                    numericValue = parts[0] + '.' + parts.slice(1).join('');
                }

                // Allow the user to enter digits after the decimal
                if (numericValue.includes('.')) {
                    var [integerPart, decimalPart] = numericValue.split('.');
                    if (decimalPart.length > 2) {
                        // Round the value to 2 decimal places if there are more than 2 digits
                        numericValue = (parseFloat(integerPart + '.' + decimalPart) || 0).toFixed(2);
                    }
                }

                // Remove leading zeros, but ensure at least one '0'
                if (numericValue.includes('.')) {
                    var [integerPart, decimalPart] = numericValue.split('.');
                    integerPart = integerPart.replace(/^0+/, '') || '0'; // Remove leading zeros but ensure at least '0'
                    numericValue = integerPart + '.' + decimalPart;
                } else {
                    numericValue = numericValue.replace(/^0+/, '') || '0'; // Remove leading zeros but ensure at least '0'
                }
                if (numericValue.length > 10) {
                    numericValue = numericValue.substring(0, 10);
                }
                if (parseFloat(numericValue) > parseFloat(amount)) {
                    numericValue = amount;
                }
                $(this).val(numericValue);
            });

        });
    </script>

    <script>
        var lastMessage = '';
        var lastType = '';

        function displayToast(message, type) {
            // Clear existing toasts before showing the next one
            toastr.clear();

            // Display the new toast
            toastr[type](message);

            // Store the last message and type for future reference (if needed)
            lastMessage = message;
            lastType = type;
        }

        // Toastr configuration options
        toastr.options = {
            closeButton: true,            // Show close button on the toast
            progressBar: true,            // Show progress bar
            positionClass: 'toast-top-right',  // Position of the toast
            showMethod: 'slideDown',      // Animation for showing the toast
            hideMethod: 'slideUp',        // Animation for hiding the toast
            timeOut: 4000,                // Duration before the toast disappears (in milliseconds)
            onHidden: function () {
                // Called after the toast is hidden, this ensures the next toast will not overlap
                toastr.clear();
            }
        };
    </script>
</body>

</html>
