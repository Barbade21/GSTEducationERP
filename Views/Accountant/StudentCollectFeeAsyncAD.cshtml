
@model GSTEducationERPLibrary.Accountant.Accountant

@{
    ViewBag.Title = "StudentCollectFeeAsyncAD";
    Layout = "~/Views/Shared/_LayoutERP.cshtml";
}


@using (Html.BeginForm("RecietOfCollectedFeesAsyncAD", "Accountant", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "feeCollectionForm" }))
{

    <style>
        h3 {
            color: #64bbc9;
            font-weight: bold;
            font-size: 20px;
            margin-left: 17px;
            margin-bottom: -10px;
            font-family: sans-serif;
            color: #33CCCC;
        }

        .custom-card-width {
            max-width: 80%; /* Adjust as needed */
            margin: auto; /* Center the card */
        }

        .breadcrumb a {
            color: #33CCCC; /* Base color for breadcrumb links */
            text-decoration: none; /* Optional: removes underline */
        }

            .breadcrumb a:hover,
            .breadcrumb a:focus {
                color: #009999; /* Lighter shade on hover or focus */
            }

        .breadcrumb .breadcrumb-item.active {
            color: #009999; /* Color for the active breadcrumb item */
        }

        /* Optional: If you want to add a faint background on click (active state) */
        .breadcrumb a:active {
            color: #009999;
            background-color: #e6f9ff; /* Light background on click */
        }

        .input-group {
            display: flex;
            align-items: center;
        }

        .input-group-text {
            background-color: #f8f9fa;
            border: 1px solid #ced4da;
            padding: 0.375rem 0.75rem;
            border-radius: 0.25rem;
            margin-right: -1px; /* Ensure seamless border with input */
        }
    </style>


    <div class="card custom-card-width">
        <div class="card-body">
            <div class="container">
                <div class="col-md-10 justify-content-lg-start">
                    <h3 class="text-center">Pending Installment Collection</h3>
                </div>

                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="row justify-content-center">
                        <div class="col-md-5">

                            @Html.HiddenFor(model => model.DiscountPercentage, new { id = "DiscountPercentage" })

                            @Html.HiddenFor(model => model.RemainingFees, new { id = "RemainingFees" })

                            @Html.HiddenFor(model => model.TotalFees, new { id = "DiscountPercentage" })

                            @Html.HiddenFor(model => model.TotalPaid, new { id = "RemainingFees" })

                            @Html.HiddenFor(model => model.StudentType, new { id = "RemainingFees" })

                            @Html.HiddenFor(model => model.BranchAddress, new { id = "RemainingFees" })

                            @*@Html.HiddenFor(model => model.MustCompleteAmount, new { id = "RemainingFees" })*@


                            <div class="form-group" style="display:none;">
                                @Html.LabelFor(model => model.CandidateCode, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CandidateCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CandidateCode, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Batch, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Batch, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Batch, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.CourseName, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CourseName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CourseName, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @*@Html.LabelFor(model => model.CourseFee, htmlAttributes: new { @class = "control-label" })*@
                                <label style="font-size: 15px;">
                                    Course Fee
                                </label>
                                @Html.EditorFor(model => model.CourseFee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CourseFee, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <label style="font-size: 15px;">
                                    Total Fees
                                </label>
                                @Html.EditorFor(model => model.TotalFees, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.TotalFees, "", new { @class = "text-danger" })
                            </div>



                            <div class="form-group" id="CheckBankName">
                                <label style="font-size: 15px;">
                                    Cheque Bank Name <span class="required-star" style="color: red;">*</span>
                                </label>
                                @Html.EditorFor(model => model.CheckBankName, new { htmlAttributes = new { @class = "form-control", @required = "required", id = "CheckBankNameInput" } })
                                @Html.ValidationMessageFor(model => model.CheckBankName, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group" id="CheckAccountNumber">
                                <label style="font-size: 15px;">
                                    Cheque Account Number <span class="required-star" style="color: red;">*</span>
                                </label>
                                @Html.EditorFor(model => model.CheckAccountNumber, new { htmlAttributes = new { @class = "form-control", @required = "required", id = "CheckAccountNumberInput" } })
                                @Html.ValidationMessageFor(model => model.CheckAccountNumber, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group" id="TransactionID_checqueNumber">
                                <label style="font-size: 15px;">
                                    Transaction ID/Cheque Number 
                                </label>
                                @Html.EditorFor(model => model.TransactionID_checqueNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TransactionID_checqueNumber, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="col-md-5">

                            <div class="form-group">
                                <label class="control-label">Fee Type</label>
                                @Html.HiddenFor(model => model.FeeTypeId, new { @Value = "4" })
                                <input type="text" class="form-control" value="Course Fee" readonly />
                                @Html.ValidationMessageFor(model => model.FeeTypeId, "", new { @class = "text-danger" })
                            </div>


                            <div class="form-group">
                                <label style="font-size: 15px;">
                                    Installment Date
                                </label>
                                @Html.EditorFor(model => model.InstallmentDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.InstallmentDate, "", new { @class = "text-danger" })
                            </div>




                            <div class="form-group" id="InstallmentAmount">
                                <label style="font-size: 15px;">
                                    Installment Amount <span class="required-star" style="color: red;">*</span>
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">₹</span>
                                    @Html.EditorFor(model => model.InstallmentAmount, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                </div>
                                @Html.ValidationMessageFor(model => model.InstallmentAmount, "", new { @class = "text-danger" })
                            </div>


                            @Html.HiddenFor(model => model.RemainingFees, new { id = "RemainingFees" })


                            <div class="form-group" id="paymentMode">
                                <label style="font-size: 15px;">Payment Mode <span class="required-star" style="color: red;">*</span></label>
                                @Html.DropDownListFor(model => model.PaymentModeId,
                                new SelectList(new List<Object>
                                {
                                                           new { value = "Cash", text = "Cash" },
                                                           new { value = "Bank", text = "Bank" },
                                                           new { value = "Cheque", text = "Cheque" }
                                },
                                "value",
                                "text"),
                                "Select Payment Mode",
                                new { @class = "form-control select2", @id = "paymentModeDropdown" })
                                @Html.ValidationMessageFor(model => model.PaymentModeId, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.PaymentMode, new { id = "PaymentModeText" })
                            </div>

                            <div class="form-group" id="transactionDate">
                                <label style="font-size: 15px;">
                                    Transaction Date <span class="required-star" style="color: red;">*</span>
                                </label>
                                @Html.EditorFor(model => model.TransactionDate, new { htmlAttributes = new { @class = "form-control", @id = "transactionDate" } })
                                @Html.ValidationMessageFor(model => model.TransactionDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group" id="paymentType">
                                <label style="font-size: 15px;">Payment Type <span class="required-star" style="color: red;">*</span></label>
                                @Html.DropDownListFor(model => model.PaymentType,
                                new SelectList(new List<Object>
                                {
                                                           new { value = "NEFT", text = "NEFT" },
                                                           new { value = "RTGS", text = "RTGS" },
                                                           new { value = "UPI", text = "UPI" }
                                },
                                "value",
                                "text"),
                                "Select Payment Mode",
                                new { @class = "form-control select2", @id = "paymentTypeDropdown" })
                                @Html.ValidationMessageFor(model => model.PaymentType, "", new { @class = "text-danger" })
                            </div>





                            <div id="AccountHolderField" class="form-group">
                                <label style="font-size: 15px;">
                                    Bank Account <span class="required-star" style="color: red;">*</span>
                                </label>
                                <div>
                                    @{
                                        var bankList = ViewBag.BankAccountList;
                                    }
                                    @Html.DropDownListFor(model => model.AccountHolderId, new SelectList(bankList, "Value", "Text"), "--Select Bank Account--", new { @class = "form-control", id = "AccountHolder" })
                                    @Html.ValidationMessageFor(model => model.AccountHolderId, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.AccountHolderId, new { id = "AccountHolderText" })

                                </div>
                            </div>



                            <div class="form-group" id="ChequeDateField">
                                <label style="font-size: 15px;">
                                    Cheque Date <span class="required-star" style="color: red;">*</span>
                                </label>
                                @Html.EditorFor(model => model.ChequeDate, new { htmlAttributes = new { @class = "form-control", @id = "ChequeDate" } })
                                @Html.ValidationMessageFor(model => model.ChequeDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-area" })
                            </div>

                        </div>
                    </div>

                    <div class="row justify-content-center">
                        <div class="col-md-3">
                            <div class="form-group">
                                <input type="submit" value="Collect Fee" class="btn btn-primary" id="collectFeeButton" />
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

}

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />

<!-- SweetAlert -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>







<script>
        $(document).ready(function () {
            // Hide fields on load
            $('#AccountHolderField').hide();
            $("#ChequeDateField").hide();
            $("#BankField").hide();
            $("#TransactionID_checqueNumber").hide();
            $("#ChequeBankName").hide();
            $("#TransactionID_checqueNumber_cheque").hide();
            $("#CheckBankName").hide();
            $("#CheckAccountNumber").hide();
            $("#paymentType").hide();
            $("#transactionDate").hide();


            // Handle change event of Bank dropdown
            $('#BankNameID').change(function () {
                var bankId = $(this).val();
                if (bankId) {
                    $.ajax({
                        url: '@Url.Action("AccountHolder", "Accountant")',
                        type: 'GET',
                        dataType: 'json',
                        data: { BankId: bankId },
                        success: function (data) {
                            var dropdown = $('#AccountHolder');
                            dropdown.empty();
                            dropdown.append($('<option>').val('').text('Select Account Holder name'));
                            $.each(data, function (index, item) {
                                dropdown.append($('<option>').val(item.Value).text(item.Text));
                            });
                        },
                        error: function () {
                            alert('Failed to load account holders.');
                        }
                    });
                } else {
                    $('#AccountHolder').empty();
                }
            });

            // Payment mode change handling

            $('#paymentModeDropdown').change(function () {
        var selectedText = $(this).find("option:selected").text();
        var transactionInput = $("#TransactionID_checqueNumber input");

        // Handling for Select Payment Mode
        if (selectedText === "Select Payment Mode") {
            $("#BankField, #AccountHolderField, #ChequeDateField, #TransactionID_checqueNumber, #CheckBankName, #CheckAccountNumber, #paymentType")
                .hide().find('input, select').removeAttr('required').val(''); // Clear the values
        }

        // Handling for Cash
        if (selectedText === "Cash") {

            $("#transactionDate").show()
                .find('select, input').attr('required', 'required');

            $("#BankField, #AccountHolderField, #ChequeDateField, #TransactionID_checqueNumber, #CheckBankName, #CheckAccountNumber, #paymentType")
                .hide().find('input, select').removeAttr('required').val(''); // Clear the values
        }

        // Handling for Bank
        if (selectedText === "Bank") {
            transactionInput.val('');
            $("#AccountHolder, #AccountHolderField, #BankField , #TransactionID_checqueNumber, #transactionDate").show()
                .find('select, input').attr('required', 'required');
            $("#ChequeDateField, #CheckBankName, #CheckAccountNumber").hide()
                .find('input').removeAttr('required').val(''); // Clear the hidden field values
            $("#paymentType").show().find('select').attr('required', 'required');


            // Remove all previous validation on Transaction ID/Cheque Number input
            $('#TransactionID_checqueNumber input')
                .off('input') // Remove all previous 'input' event handlers
                .removeAttr('required') // Remove the required attribute
                .removeAttr('maxlength') // Remove any max-length attributes
                .val(''); // Clear the input value


            // Ensure alphanumeric validation for Transaction ID/Cheque Number
            $('#TransactionID_checqueNumber input').on('input', function () {
                var inputVal = $(this).val();
                if (!/^[a-zA-Z0-9]+$/.test(inputVal)) {
                    toastr.error("Transaction ID/Cheque Number should contain only letters and numbers.");
                    $(this).val(inputVal.replace(/[^a-zA-Z0-9]/g, ''));
                }

                // Limit the length to 25 characters
                if (inputVal.length > 25) {
                    toastr.error("Transaction ID/Cheque Number cannot exceed 25 characters.");
                    inputVal = inputVal.substring(0, 25);
                }

                $(this).val(inputVal); // Update the input value
            });
        }

        // Handling for Cheque
        if (selectedText === "Cheque") {
            transactionInput.val('');
            $("#ChequeDateField, #BankField, #AccountHolderField, #TransactionID_checqueNumber, #CheckBankName, #CheckAccountNumber").show()
                .find('input, select').attr('required', 'required');
            $("#paymentType, #transactionDate").hide().find('select').removeAttr('required').val(''); // Clear the hidden field values


            // Remove all previous validation on Transaction ID/Cheque Number input
            $('#TransactionID_checqueNumber input')
                .off('input') // Remove all previous 'input' event handlers
                .removeAttr('required') // Remove the required attribute
                .removeAttr('maxlength') // Remove any max-length attributes
                .val(''); // Clear the input value


            // Ensure numeric validation for Transaction ID/Cheque Number (no only 0)
            $('#TransactionID_checqueNumber input').on('input', function () {
                var inputVal = $(this).val();
                if (!/^\d+$/.test(inputVal) || inputVal === "0") {
                    toastr.error("Transaction ID/Cheque Number should only contain numbers and cannot be zero.");
                    $(this).val('');
                }

                // Limit the length to 25 characters
                if (inputVal.length > 6) {
                    toastr.error("Cheque Number cannot exceed 6 characters.");
                    inputVal = inputVal.substring(0, 6);
                }

                $(this).val(inputVal); // Update the input value
            });

            // Ensure numeric validation for Check Account Number (no only 0)
            $('#CheckAccountNumber input').on('input', function () {
                var inputVal = $(this).val();
                if (!/^\d+$/.test(inputVal) || inputVal === "0") {
                    toastr.error("Check Account Number should only contain numbers and cannot be zero.");
                    $(this).val('');
                }

                // Limit the length to 25 characters
                if (inputVal.length > 18) {
                    toastr.error("Cheque Account Number cannot exceed 18 characters.");
                    inputVal = inputVal.substring(0, 18);
                }

                $(this).val(inputVal); // Update the input value
            });
        }
    });



            $('#ChequeDate').on('change', function () {
                var inputVal = $(this).val();
                var inputDate = new Date(inputVal);

                // Get today's date and format it as yyyy-MM-dd
                var today = new Date();
                var todayFormatted = today.toISOString().split('T')[0];  // Formats date as yyyy-MM-dd

                // Calculate minDate (85 days before today) and maxDate (5 days after today)
                var minDate = new Date();
                minDate.setDate(today.getDate() - 85);

                var maxDate = new Date();
                maxDate.setDate(today.getDate() + 5);

                // Validate the input date
                if (inputDate < minDate) {
                    toastr.error("Cheque Date cannot be less than 85 days before today's date.");
                    $(this).val(todayFormatted);  // Set today's date
                } else if (inputDate > maxDate) {
                    toastr.error("Cheque Date cannot be more than 5 days after today's date.");
                    $(this).val(todayFormatted);  // Set today's date
                }
            });

            // Validate Installment Amount
            $('#InstallmentAmount input').on('input', function () {
                var inputVal = $(this).val();

                if (!/^\d+$/.test(inputVal)) {
                    toastr.error("Please enter a valid numeric value.");
                    $(this).val('');
                    return;
                }

                var installmentAmount = parseFloat(inputVal);

                if (installmentAmount <= 0) {
                    toastr.error("Installment Amount cannot be zero or empty.");
                    $(this).val('');
                    return;
                }

                var remainingFees = parseFloat($('#RemainingFees').val());

                if (!isNaN(installmentAmount) && installmentAmount > remainingFees) {
                    toastr.error("Installment Amount cannot be greater than the remaining fees.");
                    $(this).val(remainingFees);
                }
            });



            // Collect Fee button handling
            $("#collectFeeButton").click(function (event) {
                event.preventDefault(); // Prevent form submission
              
                var isValid = true;

                // Function to validate if a field is required and empty
                function validateField(field, isRequired) {
                    var isFieldValid = true;

                    if (isRequired && field.val().trim() === "") {
                        toastr.error(field.closest('.form-group').find('label').text() + " is required.");
                        isFieldValid = false;
                    }

                    return isFieldValid;
                }



                // Validate Payment Mode
                if ($("#paymentModeDropdown").val() === "") {
                    toastr.error("Payment Mode is required.");
                    isValid = false;
                }

                // Get selected payment mode
                var selectedText = $("#paymentModeDropdown option:selected").text();

                // Validate fields based on selected payment mode
                if (selectedText === "Cash") {
                    // No additional fields to validate for Cash
                    // Validate Installment Amount
                    var installmentAmount = parseFloat($('#InstallmentAmount input').val());
                    var remainingFees = parseFloat($('#RemainingFees').val());

                    if (installmentAmount <= 0 || isNaN(installmentAmount) || installmentAmount > remainingFees) {
                        toastr.error("Invalid Installment Amount for Cheque payment.");
                        isValid = false;
                    }

                }
                else if (selectedText === "Bank") {
                    //isValid &= validateField($("#BankField").find('select'), true);
                     isValid &= validateField($("#AccountHolderField").find('select'), true);
                    isValid &= validateField($("#TransactionID_checqueNumber").find('input'), true);

                    // Validate Installment Amount
                    var installmentAmount = parseFloat($('#InstallmentAmount input').val());
                    var remainingFees = parseFloat($('#RemainingFees').val());

                    if (installmentAmount <= 0 || isNaN(installmentAmount) || installmentAmount > remainingFees) {
                        toastr.error("Invalid Installment Amount for Cheque payment.");
                        isValid = false;
                    }

                    $('#TransactionID_checqueNumber input').on('input', function () {
                        var inputVal = $(this).val();
                        if (!/^[a-zA-Z0-9]+$/.test(inputVal)) {
                            toastr.error("Transaction ID/Cheque Number should contain only letters and numbers.");
                            $(this).val(inputVal.replace(/[^a-zA-Z0-9]/g, ''));
                        }
                    });
                }
                else if (selectedText === "Cheque") {
                    isValid &= validateField($("#ChequeDateField").find('input'), true);
                    //isValid &= validateField($("#BankField").find('select'), true);
                    isValid &= validateField($("#AccountHolderField").find('select'), true);
                    isValid &= validateField($("#TransactionID_checqueNumber").find('input'), true);


                    // Validate Check Bank Name and Check Account Number
                    isValid &= validateField($("#CheckBankName").find('input'), true);
                    isValid &= validateField($("#CheckAccountNumberInput"), true); // Validate CheckAccountNumber


                    // Validate Installment Amount
                    var installmentAmount = parseFloat($('#InstallmentAmount input').val());
                    var remainingFees = parseFloat($('#RemainingFees').val());

                    if (installmentAmount <= 0 || isNaN(installmentAmount) || installmentAmount > remainingFees) {
                        toastr.error("Invalid Installment Amount for Cheque payment.");
                        isValid = false;
                    }
                }



                if (selectedText === "Cheque") {
                    // Validate Cheque Date
                    var inputVal = $('#ChequeDate').val();
                    var inputDate = new Date(inputVal);

                    var today = new Date();
                    var todayFormatted = today.toISOString().split('T')[0];
                    var minDate = new Date();
                    minDate.setDate(today.getDate() - 85);
                    var maxDate = new Date();
                    maxDate.setDate(today.getDate() + 5);

                    if (inputDate < minDate || inputDate > maxDate) {
                        toastr.error("Cheque Date should be between 85 days before and 5 days after today's date.");
                        isValid = false;
                    }

                    // Validate Installment Amount
                    var installmentAmount = parseFloat($('#InstallmentAmount input').val());
                    var remainingFees = parseFloat($('#RemainingFees').val());

                    if (installmentAmount <= 0 || isNaN(installmentAmount) || installmentAmount > remainingFees) {
                        toastr.error("Invalid Installment Amount for Cheque payment.");
                        isValid = false;
                    }
                }


                


                // If the form is valid, proceed with the confirmation
                if (isValid) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to proceed with fee collection?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, collect it!',
                        cancelButtonText: 'No, cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Show success message after confirmation
                            Swal.fire({
                                title: 'Success!',
                                text: 'Fee collection is being processed.',
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 2000
                            }).then(() => {
                                // Submit the form after the success message
                                $(this).closest('form').submit();
                            });
                        }
                    });
                }
            });
        });
</script>



<script>
    $(window).on('pageshow', function (event) {
        // Check if the user is navigating back from RecietOfCollectedFeesAsyncAD
        if (sessionStorage.getItem('visitedRecietOfCollectedFees')) {

           // Redirect to studentFeeMainpageasyncSH with tab parameter
            window.location.href = '@Url.Action("studentFeeMainpageasyncSH", "Accountant")' + '?tab=Pending';
            // Clear the marker to avoid redirecting when visiting from other pages
           // sessionStorage.removeItem('visitedRecietOfCollectedFees');
        }
    });
</script>











