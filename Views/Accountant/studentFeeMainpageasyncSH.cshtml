@model GSTEducationERPLibrary.Accountant.Accountant

@{
    Layout = "~/Views/Shared/_LayoutERP.cshtml";
}

<html>
<head>
    <script src="~/Content/plugins/jquery/jquery.min.js"></script>
    <link href="~/Content/plugins/fontawesome-free/css/all.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
    <style>
        h2 {
            padding-top: 10px;
            margin-bottom: 10px;
            font-family: Verdana;
            font-weight: bold;
            font-size: medium;
            color: #33CCCC;
        }

        .dataTables_wrapper .btn-secondary {
            color: #235;
            background-color: transparent !important;
            border-color: transparent;
            font-size: x-large;
            margin: 0px !important;
        }

       /* .card-primary.card-outline-tabs > .card-header a.active {
            border-top: 3px solid #33CCCC;
        }
*/
       /* a {
            color: #33CCCC;
        }*/
/*
        .card.card-outline-tabs .card-header a:hover {
            color: #33CCCC;
        }*/

       /* .card-primary.card-outline-tabs > .card-header a.active, .card-primary.card-outline-tabs > .card-header a.active:hover {
            border-top: 3px solid #33CCCC;
        }*/

        .card-body {
            font-family: Calibri !important;
            padding-bottom: 0px !important;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        th {
            background-color: #33CCCC;
            color: #000;
            text-align: center !important;
        }

        td {
            text-align: center;
            color: black !important;
        }

        .table td {
            padding: 0px 0px 0px 0px !important;
            font-size: 14px !important;
        }

        .table th {
            padding: 5px 5px 4px 10px !important;
            font-size: 14px !important;
        }

        table.dataTable > thead .sorting:after, table.dataTable > t head .sorting:before {
            font-size: xx-small !important;
        }
        div.dataTables_wrapper div.dataTables_filter {
            margin-top: -35px !important;
        }

        div.dt-buttons {
            margin-top: -10px !important;

        }

        .btn-group > .btn:not(:last-child):not(.dropdown-toggle), .btn-group > .btn-group:not(:last-child) > .btn {
            padding-left: 5px !important;
            padding-right: 5px !important;
            
        }

        div.dataTables_wrapper div.dataTables_filter label {
            font-size: small !important;
            /*display: contents;*/
        }

        div.dataTables_wrapper div.dataTables_filter input {
            height: -20px !important;
           
        }

        div.dataTables_wrapper div.dataTables_info {
            padding: 0px !important;
            font-size: small !important;
        }

        div.dataTables_wrapper div.dataTables_paginate ul.pagination {
            margin-top: -20px !important;
        }

        div.dataTables_wrapper div.dataTables_paginate {
            font-size: small !important;
        }

     

        .table.dataTable.dtr-inline.collapsed > tbody > tr > td.dtr-control:before, table.dataTable.dtr-inline.collapsed > tbody > tr > th.dtr-control:before {
            background-color: #33CCCC;
        }

      /*  .dropdown-item.active, .dropdown-item:active {
            background-color: #33CCCC;
        }*/
/*
        .sidebar-dark-primary .nav-sidebar > .nav-item > .nav-link.active, .sidebar-light-primary .nav-sidebar > .nav-item > .nav-link.active {
            background-color: #33CCCC;
        }*/

        h3, h5 {
            color: #33CCCC;
        }

        .d-none {
            display: none;
        }
        /* Loading Overlay */
        #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
            z-index: 9999;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Loader GIF */
        #loader-gif {
            width: auto; /* Adjust size as needed */
            height: auto;
        }
    </style>
</head>
<body style="margin: 0; padding: 0;">
    <br />
    <div class="card" style="padding: 10px;">
        <div class="row" >
            <div class="col-md-4">
                <h2>Fees Collection</h2>
            </div>
        </div>
        <hr />
        <div class="card" style="margin-top: 0px;">
            <div class="card-body">
                <!-- Tab Navigation -->
                <div class="container" style="margin-left:-10px;">
                    <div class="row" style="height: 2vw; padding-left: 10px;">
                        <div class="col-md-4.5">
                            <div class="card card-primary card-outline card-outline-tabs" style=" margin-top: 1vw;">
                                <div class="card-header p-0 border-bottom-0">
                                    <ul class="nav nav-tabs" id="custom-tabs-four-tab" role="tablist">
                                        <li class="nav-item" width="12.5vw">
                                            <a class="nav-link active" data-toggle="pill" href="#internal" id="internalstudents" role="tab" aria-controls="custom-tabs-four-home" aria-selected="true">Installments</a>
                                        </li>
                                        
                                        <li class="nav-item">
                                            <a class="nav-link" data-toggle="pill" href="#Pending" id="Pending" role="tab" aria-controls="custom-tabs-four-home" aria-selected="true">Overdue Installments</a>
                                        </li>
                                    </ul>
                                </div>
                               
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group" style=" display:flex;margin-top: -1vw;">
                                <div class="col-md-5" id="Course" style="">
                                    @Html.LabelFor(model => model.CourseCode, "Course Name", htmlAttributes: new { @class = "control-label col-md-12" })
                                    @Html.DropDownListFor(model => model.CourseCode, new SelectList(ViewBag.Course, "Value", "Text"), "---Select Course---", new { @class = "form-control col-md-10", required = "required", id = "CourseCode" })
                                    @Html.ValidationMessageFor(model => model.CourseCode, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-md-5" id="Batch" style="">
                                    @Html.LabelFor(model => model.BatchName, "Batch Name", htmlAttributes: new { @class = "control-label col-md-12" })
                                    @Html.DropDownListFor(model => model.BatchName, new SelectList(Enumerable.Empty<SelectListItem>()), "---Select Batch---", new { @class = "form-control col-md-10", id = "BatchName", required = "required" })
                                    @Html.ValidationMessageFor(model => model.BatchName, "", new { @class = "text-danger" })
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filters and Date Selection -->
             
                <!-- Loader Overlay -->
                <div id="loading-overlay" style="display: none;">

                    <img src="~/Content/Admin/icon/AccountantLoader.gif" alt="Loading" id="loader-gif">
                </div>
                <!-- Student List -->
                <div id="StudentList" class="mt-4" style="margin-top: 2.5rem !important;">
                    <!-- Table content will be loaded here -->
                </div>
            </div>
        </div>

    </div>

    <!-- Include JS files -->
    <script src="~/Content/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/Content/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/Content/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/Content/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/Content/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/Content/plugins/jszip/jszip.min.js"></script>
    <script src="~/Content/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/Content/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/Content/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/Content/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/Content/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script type="text/javascript">
jQuery.noConflict();
 jQuery(document).ready(function ($) {
     function showLoadingOverlay() {
         // Always start progress from 0
         var progress = 0;

         // Reset progress bar and text
         $('#progress-bar').css('width', '0%');
         $('#progress-percentage').text('0%');
         $('#loading-overlay').css('opacity', '1').show(); // Show the overlay

         // Function to simulate steady progress increment
         var interval = setInterval(function () {
             if (progress < 100) { // Keep incrementing until 100%
                 progress += Math.floor(Math.random() * 5) + 2; // Increment by a random value between 2 and 5
                 if (progress > 100) progress = 100; // Ensure it does not exceed 100%
             }

             // Update the width of the progress bar and percentage text
             $('#progress-bar').css('width', progress + '%');
             $('#progress-percentage').text(progress + '%');

             // Stop the interval when progress reaches 100%
             if (progress >= 100) {
                 clearInterval(interval);
                 $('#progress-bar').css('width', '100%'); // Ensure it reaches 100%
                 $('#progress-percentage').text('100%'); // Display 100% text
             }
         }, 300); // Interval duration in milliseconds

         // Return the interval ID for potential future reference
         return interval;
     }

     // Function to finalize and hide the loading overlay
     function hideLoadingOverlay(interval) {
         // Ensure the progress bar is at 100% when hiding
         $('#progress-bar').css('width', '100%');
         $('#progress-percentage').text('100%');
         $('#loading-overlay').fadeOut(500, function () {
             $(this).hide();
         });
         clearInterval(interval); // Clear the interval to stop progress increment
     }

             if (sessionStorage.getItem('visitedRecietOfCollectedFees') === 'true') {
                  // Remove the sessionStorage item to prevent reopening the tab on subsequent page loads
                  sessionStorage.removeItem('visitedRecietOfCollectedFees');
             }

                // Load initial tab content
            loadTabContent('@Url.Action("ListInternalStudentasyncSH", "Accountant")');




    // Function to filter student list based on filters
    function filterStudentslst(tabId, Course, Batch, startDate, endDate, dateFilterType) {
        var url = '@Url.Action("FilterFeeCollection", "Accountant")' +
            '?Course=' + encodeURIComponent(Course) +
            '&Batch=' + encodeURIComponent(Batch) +
            '&startDate=' + encodeURIComponent(startDate) +
            '&endDate=' + encodeURIComponent(endDate) +
            '&dateFilterType=' + encodeURIComponent(dateFilterType) +
            '&tabId=' + encodeURIComponent(tabId);

        $.ajax({
            url: url,
            type: 'GET',
            success: function (response) {
                $('#StudentList').html(response);
                initializeDataTable();
            },
            error: function (xhr, status, error) {
                console.error('AJAX Error:', status, error);
            }
        });
    }

    // Function to load tab content dynamically
     function loadTabContent(url) {
         showLoadingOverlay();
        $.ajax({
            url: url,
            type: 'GET',
            success: function (response) {
                $('#StudentList').html(response);
                initializeDataTable();
            },
            error: function (xhr, status, error) {
                console.error('Error loading tab content:', status, error);
            },
            complete: function () {

                hideLoadingOverlay();
            }
        });
    }

    // Initialize DataTables with buttons
    function initializeDataTable() {
        $('#StudentList table').DataTable({
            "responsive": true,
            "lengthChange": false,
            "autoWidth": false,
            "stateSave": true,
            "ordering": false,
            "dom": 'Bfrtip',
            "buttons": [
                { extend: 'copy', text: '<img src="/Content/Admin/icon/copy.png" title="Copy" alt="Copy" height="20" width="20" />', titleAttr: 'Copy' },
                { extend: 'csv', text: '<img src="/Content/Admin/icon/csv.jpg" title="CSV" alt="CSV" height="20" width="20" />', titleAttr: 'CSV' },
                { extend: 'excel', text: '<img src="/Content/Admin/icon/xls-file.png" title="xls" alt="xls" height="20" width="20" />', titleAttr: 'Excel' },
                { extend: 'pdf', text: '<img src="/Content/Admin/icon/pdf-file.png" title="pdf" alt="pdf" height="20" width="20" />', titleAttr: 'PDF' },
                { extend: 'print', text: '<img src="/Content/Admin/icon/printer.png" title="printer" alt="printer" height="20" width="20" />', titleAttr: 'Print' },
                { extend: 'colvis', text: '<img src="/Content/Admin/icon/column.jpg" title="column" alt="column" height="20" width="20" />', titleAttr: 'Columns' }
            ]
        });
    }

    // Initialize filter event handlers
    function initializeFilterEventHandlers() {
        var Course = $('#CourseCode option:selected').text();
        var Batch = $('#BatchName option:selected').text();
        var startDate = $('#StartDate').val();
        var endDate = $('#endDate').val();
        var dateFilterType = $('#DateFilterType').val();

        $('#CourseCode').off('change').on('change', function () {
            Course = $('#CourseCode option:selected').text();
            filterStudentslst(getActiveTabId(), Course, Batch, startDate, endDate, dateFilterType);

            var selectedCourse = $(this).val();
            if (selectedCourse) {
                var url = '@Url.Action("ListALLBatchSNAsync", "Accountant")';
                console.log("AJAX URL: " + url);  // Output the URL to the console for debugging
                $.ajax({
                    url: url,
                    type: 'GET',
                    data: { CourseCode: selectedCourse },
                    success: function (data) {
                        console.log("Data received: ", data);  // Log the data for debugging
                        var batchDropdown = $("#BatchName");
                        batchDropdown.empty();
                        batchDropdown.append($('<option/>', {
                            value: '',
                            text: '---Select Batch---'
                        }));
                        $.each(data, function (i, batch) {
                            batchDropdown.append($('<option/>', {
                                value: batch.Value,
                                text: batch.Text
                            }));
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX Error:', status, error);  // Log the error for debugging
                    }
                });
            } else {
                $("#BatchName").empty().append($('<option/>', {
                    value: '',
                    text: '---Select Batch---'
                }));
            }
        });

        $('#BatchName').off('change').on('change', function () {
            if (!Course) {
                $('#BatchName').val(''); // Clear the batch selection if no course is selected
                toastr.warning('Please select a course before choosing a batch.', 'Warning');
            } else {
                Batch = $('#BatchName option:selected').text();
                filterStudentslst(getActiveTabId(), Course, Batch, startDate, endDate, dateFilterType);
            }
        });

        // Start date filter change event
        $('#StartDate').off('change').on('change', function () {
            var tabId = getActiveTabId();
            startDate = $(this).val();
            if (tabId === 'internal') {
                if (!dateFilterType) {
                    $('#StartDate').val('');
                    toastr.warning('Please select a date filter type before choosing a date.', 'Warning');
                } else if (new Date(startDate) > new Date(endDate)) {
                    $('#StartDate').val('');
                    toastr.warning('Start date cannot be greater than end date.', 'Warning');
                } else if (new Date(endDate) < new Date(startDate)) {
                    $('#StartDate').val('');
                    toastr.warning('End date must be at least 10 days after the start date.', 'Warning');
                } else {
                    filterStudentslst(tabId, Course, Batch, startDate, endDate, dateFilterType);
                }


            } else {


                // For external tab, skip dateFilterType check
                if (new Date(startDate) > new Date(endDate)) {
                    $('#StartDate').val('');
                    toastr.warning('Start date cannot be greater than end date.', 'Warning');
                } else if (new Date(endDate) < new Date(startDate)) {
                    $('#StartDate').val('');
                    toastr.warning('End date must be at least 10 days after the start date.', 'Warning');
                } else {
                    filterStudentslst(tabId, Course, Batch, startDate, endDate, null); // Pass null for dateFilterType
                }
            }
        });

        // End date filter change event
        $('#endDate').off('change').on('change', function () {
            var tabId = getActiveTabId();
            endDate = $(this).val();
            if (tabId === 'internal') {
                if (!dateFilterType) {
                    $('#endDate').val('');
                    toastr.warning('Please select a date filter type before choosing a date.', 'Warning');
                } else if (new Date(endDate) < new Date(startDate) || new Date(endDate) < new Date(startDate).setDate(new Date(startDate).getDate() + 10)) {
                    $('#endDate').val('');
                    toastr.warning('End date must be at least 10 days after the start date.', 'Warning');
                } else {
                    filterStudentslst(tabId, Course, Batch, startDate, endDate, dateFilterType);
                }

            } else {

                // For external tab, end date cannot be greater than today's date
                var todayString = getTodayString();
                if (new Date(endDate) > new Date(todayString)) {
                    $('#endDate').val('');
                    toastr.warning('End date cannot be greater than today\'s date.', 'Warning');
                } else if (new Date(endDate) < new Date(startDate) || new Date(endDate) < new Date(startDate).setDate(new Date(startDate).getDate() + 10)) {
                    $('#endDate').val('');
                    toastr.warning('End date must be at least 10 days after the start date.', 'Warning');
                } else {
                    filterStudentslst(tabId, Course, Batch, startDate, endDate, null); // Pass null for dateFilterType
                }
            }
        });

        // Set default values on tab load
        $(document).ready(function () {
            var todayString = getTodayString();
            var tabId = getActiveTabId();

            if (tabId === 'internal') {
                var endDate = new Date();
                endDate.setMonth(endDate.getMonth() + 1); // End date is 1 month from today
                var endDateString = endDate.toISOString().split('T')[0]; // YYYY-MM-DD

                var startDate = new Date(endDate);
                startDate.setMonth(startDate.getMonth() - 6); // Start date is 6 months before end date
                var startDateString = startDate.toISOString().split('T')[0]; // YYYY-MM-DD

                $('#StartDate').val(startDateString);
                $('#endDate').val(endDateString);
            } else if (tabId === 'external') {
                var endDate = new Date().toISOString().split('T')[0]; // Today's date
                var startDate = new Date();
                startDate.setMonth(startDate.getMonth() - 6); // Start date is 6 months before end date
                var startDateString = startDate.toISOString().split('T')[0]; // YYYY-MM-DD

                $('#StartDate').val(startDateString);
                $('#endDate').val(endDate);
            }else if (tabId === 'Pending') {
                var endDate = new Date().toISOString().split('T')[0]; // Today's date
                var startDate = new Date();
                startDate.setMonth(startDate.getMonth() - 6); // Start date is 6 months before end date
                var startDateString = startDate.toISOString().split('T')[0]; // YYYY-MM-DD

                $('#StartDate').val(startDateString);
                $('#endDate').val(endDate);
            }
        });

        // Date filter type change event
        $('#DateFilterType').off('change').on('change', function () {
            dateFilterType = $(this).val();
            $('#StartDate').val('');
            $('#endDate').val('');
            filterStudentslst(getActiveTabId(), Course, Batch, startDate, endDate, dateFilterType);
        });
    }

    // Function to get the active tab ID
    function getActiveTabId() {
        return $('#custom-tabs-four-tab a.active').attr('href').substring(1);
    }

    // Function to get today's date as a string in YYYY-MM-DD format
    function getTodayString() {
        var today = new Date();
        return today.toISOString().split('T')[0];
    }

    // Tab click event to load respective content
    $('#custom-tabs-four-tab a').on('click', function (e) {
        e.preventDefault();
        let tabId = $(this).attr('href').substring(1);
        let url = '';

        if (tabId === 'internal') {
            url = '@Url.Action("ListInternalStudentasyncSH", "Accountant")';
            $('#Course, #Batch, #DateType').removeClass('d-none');
        } else if (tabId === 'external') {
            url = '@Url.Action("ListOfExternalStudentasyncSH", "Accountant")';
            $('#Course, #Batch, #DateType').addClass('d-none');
        } else if (tabId === 'Pending') {
            url = '@Url.Action("PendingInstallmentsListAsyncAD", "Accountant")';
            $('#DateType').addClass('d-none');
        }

        if (url) {
            loadTabContent(url);
            $(this).tab('show');
        } else {
            console.error('Invalid tabId:', tabId);
        }
    });

    // Initial filter setup
    var initialCourse = $('#CourseCode option:selected').text();
    var initialBatch = $('#BatchName option:selected').text();
    var initialStartDate = $('#StartDate').val();
    var initialEndDate = $('#endDate').val();
    var initialDateFilterType = $('#DateFilterType').val();
    var initialTabID = getActiveTabId();

    if (initialTabID || initialCourse || initialBatch || initialStartDate || initialEndDate || initialDateFilterType) {
        filterStudentslst(initialTabID, initialCourse, initialBatch, initialStartDate, initialEndDate, initialDateFilterType);
    }

    // Initialize event handlers
    initializeFilterEventHandlers();
});
    </script>


    <script>
        $(document).ready(function () {

            // Function to activate a specific tab by its ID
            function activateTab(tabId) {
                $('#custom-tabs-four-tab a[href="#' + tabId + '"]').tab('show'); // Open the tab
            }

            // Check if there's a 'tab' parameter in the URL
            var urlParams = new URLSearchParams(window.location.search);
            var tabParam = urlParams.get('tab');

            if (tabParam) {
                // If a tab parameter exists, open the corresponding tab
                activateTab(tabParam);

                // Optionally trigger the tab click handler to load content
                $('#custom-tabs-four-tab a[href="#' + tabParam + '"]').trigger('click');
            }
        });

    </script>

    @*<script>
        $(document).ready(function () {


            // Check if the sessionStorage item 'visitedRecietOfCollectedFees' is set to 'true'
            if (sessionStorage.getItem('visitedRecietOfCollectedFees') === 'true') {
                // Open the "Pending" tab
                var pendingTabUrl = '@Url.Action("PendingInstallmentsListAsyncAD", "Accountant")';
                loadTabContent(pendingTabUrl);

                // Activate the "Pending" tab
                $('.nav-tabs a[href="#Pending"]').tab('show');

                // Remove the sessionStorage item to prevent reopening the tab on subsequent page loads
                sessionStorage.removeItem('visitedRecietOfCollectedFees');
            }

            // Function to load the tab content dynamically
            function loadTabContent(url) {
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (response) {
                        $('#StudentList').html(response);
                        initializeDataTable(); // Initialize DataTables after content is loaded
                    },
                    error: function (xhr, status, error) {
                        console.error('Error loading tab content:', status, error);
                    }
                });
            }

            // Function to initialize DataTables (if required)
            function initializeDataTable() {
                // Add your DataTable initialization logic here if needed
            }

        });
        </script>*@




</body>
</html>
