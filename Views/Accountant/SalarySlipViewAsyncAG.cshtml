@model GSTEducationERPLibrary.Accountant.Accountant

@{
    ViewBag.Title = "SalarySlipViewAsyncAG";
    Layout = null;
    var culture = System.Globalization.CultureInfo.CurrentCulture;
}

<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <title>Payslip</title>

    <style>
        button.print-button {
            width: 80px;
            height: 80px;
            margin-left: 90%;
            position: relative;
            padding: 0;
            border: none;
            background: transparent;
        }

            span.print-icon, span.print-icon::before, span.print-icon::after, button.print-button:hover .print-icon::after {
                border: solid 4px #333;
                box-sizing: border-box;
                background-color: #fff;
            }

        span.print-icon {
            position: relative;
            display: inline-block;
            width: 60%;
            height: 35%;
            background: #fff;
            border-radius: 20% 20% 0 0;
            margin-top: 20%;
        }

            span.print-icon::before, span.print-icon::after {
                content: "";
                position: absolute;
                left: 12%;
                right: 12%;
                transition: height .2s;
            }

            span.print-icon::before {
                bottom: 100%;
                height: 110%;
                transition: height .2s .15s;
            }

            span.print-icon::after {
                top: 55%;
                height: 0;
                background: #fff;
                background-repeat: no-repeat;
                background-size: 70% 90%;
                background-position: center;
                background-image: linear-gradient(to top, #fff 0, #fff 14%, #333 14%, #333 28%, #fff 28%, #fff 42%, #333 42%, #333 56%, #fff 56%, #fff 70%, #333 70%, #333 84%, #fff 84%, #fff 100%);
            }

        button.print-button:hover .print-icon::before {
            height: 0;
        }

        button.print-button:hover .print-icon::after {
            height: 120%;
            transition: height .2s .15s, border-width 0s .16s;
        }

        button.print-button:hover {
            cursor: pointer;
        }

        body {
            font-size: 10px;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .card {
            width: 800px;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

            .header img {
                max-width: 100px;
                height: auto;
            }

            .header .company-info {
                text-align: center;
                flex-grow: 1;
            }

                .header .company-info h2 {
                    margin: 0;
                    font-size: 14px;
                }

            .header .address {
                text-align: right;
            }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 10px;
            margin-bottom: 10px;
        }

        table, th, td {
            border: 1px solid black;
        }

        th, td {
            padding: 3px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .section {
            margin-top: 4px;
        }

        .earnings-table,
        .deductions-table,
        .totals-table {
            margin-bottom: 10px;
        }

            .earnings-table th,
            .deductions-table th,
            .totals-table th {
                background-color: #eaf5ea;
            }

            .deductions-table th {
                background-color: #f5eaea;
            }

            .totals-table th {
                background-color: #f2f2f2;
            }

        .address {
            text-align: right;
        }

        .address-part {
            margin-bottom: 5px;
        }

        .h1 {
            font-family: fantasy;
        }

        .salary-section {
            margin-top: 20px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
        }

        .tables-container {
            display: flex;
            justify-content: space-between;
        }

        .table-wrapper {
            flex: 1;
            /* Removed margin to make tables touch each other */
            margin: 0;
        }

        .earnings-table, .deductions-table {
            width: 100%;
            border-collapse: collapse;
        }

            .earnings-table th, .deductions-table th,
            .earnings-table td, .deductions-table td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }

            .earnings-table th, .deductions-table th {
                background-color: #f2f2f2;
            }

        .table-wrapper h4 {
            text-align: center;
            margin-bottom: 10px;
        }

        .deductions-table th, .deductions-table td {
            border-left: none;
        }

        .deductions-table td {
            border-left: none;
        }

        #Name {
            width: 100%;
            border: 1px solid #ddd;
            margin-bottom: 0; /* Ensure no margin below */
        }

        .earnings {
            background-color: #d4edda; /* Light green */
        }

        /* Styles for deductions rows */
        .deductions {
            background-color: #f8d7da; /* Light red */
        }

        .header {
            text-align: center;
            margin: 0 auto;
        }

        .logo-container {
            text-align: center;
            margin-bottom: 10px;
        }

        .company-logo {
            display: block;
            margin: 0 auto;
            max-width: 180px;
            /* Ensure the logo fits within the container */
        }

        .company-info {
            margin-top: 10px; /* Adjust as needed for spacing */
        }

        .company-name {
            font-size: 3em; /* Adjust size as needed */
            margin-left: -80px;
            font-family: Impact, fantasy;
        }

        .company-address {
            font-size: 1em; /* Adjust size as needed */
            margin-top: -10px;
        }
    </style>


</head>

<body>

    <div class="card">

        <button onclick="printReceipt();" class="print-button"><span class="print-icon"></span></button>

        <div class="header">
            <div class="logo-container">

                <img src="~/Content/Admin/img/@Model.Logo" alt="Company Logo" class="company-logo" />
            </div>
            <div class="company-info">
                <h1 class="company-name">@Model.ClientName</h1>
                <h6 class="company-address">@Model.Address</h6>
            </div>
        </div>
        <h4 style="text-align: center; font-family:'Times New Roman'"><strong>Payslip</strong></h4>
        <div class="card">
            <table>
                <tr>
                    <td><strong>Staff Code :</strong></td>
                    <td>@Model.StaffCode</td>
                    <td><strong>Staff Name :</strong></td>
                    <td>@Model.StaffName</td>
                </tr>
                <tr>
                    <td><strong>Center Name :</strong></td>
                    <td>@Model.CenterName</td>
                    <td><strong>Bank Name :</strong></td>
                    <td>@Model.BankName</td>
                </tr>
                <tr>
                    <td><strong>Department :</strong></td>
                    <td>@Model.Department</td>
                    <td><strong>Account Number :</strong></td>
                    <td>@Model.AccountNumber</td>
                </tr>
                <tr>
                    <td><strong>Date of Joining :</strong></td>
                    <td>@Model.JoiningDate.ToString("dd-MM-yyyy")</td> <!-- Date format added -->
                    <td><strong>PAN Number :</strong></td>
                    <td>@Model.PANNumber</td>
                </tr>
                <tr>
                    <td><strong>StaffPosition :</strong></td>
                    <td>@Model.StaffPosition</td>
                    <td><strong>PF Number :</strong></td>
                    <td>@Model.PFNumber</td>
                </tr>
                <tr>
                    <td><strong>ESI No :</strong></td>
                    <td>@Model.ESINumber</td>
                    <td><strong>Payable Days :</strong></td>
                    <td>@Model.WorkedDays</td>
                </tr>
                <tr>
                    <td><strong>Present Days :</strong></td>
                    <td>@Model.PresentDays</td>
                    <td><strong>Total Days:</strong></td>
                    <td>@Model.TotalDays</td>
                </tr>
            </table>




            @{
                // Prepare earnings data
                var allowanceComponents = !string.IsNullOrEmpty(Model.AllowanceComponents)
                    ? Model.AllowanceComponents.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                    : new string[] { };

                var allowanceAmounts = !string.IsNullOrEmpty(Model.AllowanceAmounts)
                    ? Model.AllowanceAmounts.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                        .Select(amount =>
                        {
                            decimal result;
                            if (decimal.TryParse(amount.Trim(), out result))
                            {
                                return result;
                            }
                            return 0;
                        })
                        .ToList()
                    : new List<decimal>();

                // Prepare deductions data
                var deductionComponents = !string.IsNullOrEmpty(Model.DeductionComponents)
                    ? Model.DeductionComponents.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                    : new string[] { };

                var deductionAmounts = !string.IsNullOrEmpty(Model.DeductionAmounts)
                    ? Model.DeductionAmounts.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                        .Select(amount =>
                        {
                            decimal result;
                            if (decimal.TryParse(amount.Trim(), out result))
                            {
                                return result;
                            }
                            return 0;
                        })
                        .ToList()
                    : new List<decimal>();

                // Determine maximum number of rows
                int maxRows = Math.Max(
                    allowanceComponents.Length + 1,  // +1 for the Basic Salary row
                    deductionComponents.Length
                );
            }

            <table id="Name" style="border-bottom: 2px solid black; margin-bottom: -2px;">
                <thead>
                    <tr>
                        <th style="width: 50%; font-size: medium; background-color: #9DBDFF">Earning</th>
                        <th style="width: 50%; font-size: medium; background-color: #9DBDFF">Deduction</th>
                    </tr>

                </thead>
            </table>
            <div class="tables-container">
                <div class="table-wrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Description </th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="earnings">
                                <td><strong>Basic Salary</strong></td>
                                <td><strong>@Model.BasicSalary.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</strong></td>
                            </tr>
                            @for (int i = 0; i < maxRows - 1; i++) // -1 to account for the Basic Salary row
                            {
                                var description = i < allowanceComponents.Length
                                    ? allowanceComponents[i].Trim()
                                    : string.Empty;
                                var amount = i < allowanceAmounts.Count
                                    ? allowanceAmounts[i]
                                    : 0;

                                <tr class="earnings">
                                    <td><strong>@description</strong></td>
                                    <td><strong>@amount.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</strong></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="table-wrapper">
                    <table style="margin-left: -1px; border-left:none;">
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < maxRows; i++)
                            {
                                var description = i < deductionComponents.Length
                                    ? deductionComponents[i].Trim()
                                    : string.Empty;
                                var amount = i < deductionAmounts.Count
                                    ? deductionAmounts[i]
                                    : 0;

                                <tr class="deductions">
                                    <td><strong>@description</strong></td>
                                    <td><strong>@amount.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</strong></td>
                                </tr>
                            }
                            @if (deductionComponents.Length == 0)
                            {
                                <tr>
                                    <td colspan="2">No deductions available</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- Total Deductions and Net Salary -->
            <div class="section">
                <table class="totals-table">
                    <tbody style="text-align: left;">
                        <tr>
                            <td><strong>Total Earnings</strong></td>
                            <td style="text-align: right ;"><strong>@Model.TotalAllowances.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</strong></td>
                        </tr>
                        <tr>
                            <td><strong>Total Deductions</strong></td>
                            <td style="text-align: right ;"><strong>@Model.TotalDeductions.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</strong></td>
                        </tr>
                        <tr>
                            <td><strong>Net Salary</strong></td>
                            <td style="text-align: right ;"><strong>@Model.NetSalary.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</strong></td>
                        </tr>
                        <tr>
                            <td style="text-align: left;"><strong>Amount in Words:</strong></td>
                            <td id="inWordsAmount" colspan="2" style="text-align: right; font-weight: bold;"></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
$(document).ready(function () {
    // Get the net salary value from the model
    var netSalary = @Html.Raw(Json.Encode(Model.NetSalary));

    // Convert the net salary amount to words
    var inWords = convertNumberToWords(netSalary);
    $('#inWordsAmount').text(inWords);
});

function convertNumberToWords(amount) {
    if (isNaN(amount) || amount === null) return 'Invalid Amount';

    // Separate the integer part and fractional part
    var parts = amount.toString().split('.');
    var integerPart = parseInt(parts[0], 10);
    var fractionPart = parts.length > 1 ? parts[1] : '00';

    if (integerPart === 0) return 'Zero';

    const units = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];
    const teens = ['', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    const scales = ['', 'Thousand', 'Million', 'Billion'];

    function convertGroup(num) {
        let word = '';
        if (num.length === 3) {
            if (num[0] !== '0') {
                word += units[num[0]] + ' Hundred ';
            }
            num = num.substring(1);
        }
        if (num.length === 2 && num[0] === '1' && num[1] !== '0') {
            word += teens[num[1]];
        } else {
            if (num.length === 2) {
                word += tens[num[0]];
                if (num[1] !== '0') {
                    word += ' ' + units[num[1]];
                }
            } else if (num.length === 1 && num[0] !== '0') {
                word += units[num[0]];
            }
        }
        return word.trim();
    }

    let numStr = integerPart.toString().split('').reverse().join('');
    let result = [];
    let scale = 0;

    for (let i = 0; i < numStr.length; i += 3) {
        let group = numStr.substr(i, 3).split('').reverse().join('');
        if (parseInt(group) > 0) {
            result.push(convertGroup(group) + ' ' + scales[scale]);
        }
        scale++;
    }
    let words = result.reverse().join(' ').trim();

    return words + ' Only';
}
    </script>



    <script src="https://cdnjs.cloudflare. com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>


    <script>
        function printReceipt() {
            const printButton = document.querySelector('.print-button');
            printButton.style.display = 'none';

            window.print();
            printButton.style.display = 'block';
        }

        async function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'pt', 'a4');
            const element = document.body;

            await html2canvas(element).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const imgWidth = 595.28;
                const pageHeight = 841.89;
                const imgHeight = canvas.height * imgWidth / canvas.width;
                let heightLeft = imgHeight;
                let position = 0;

                pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;

                while (heightLeft >= 0) {
                    position = heightLeft - imgHeight;
                    pdf.addPage();
                    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                }
                pdf.save('SalarySlip.pdf');
            });
        }
    </script>


</body>
</html>